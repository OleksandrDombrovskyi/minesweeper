{"version":3,"sources":["actions/actions.tsx","utils/detectmobilebrowser.js","components/flag/flag.component.tsx","components/flags/flags.component.tsx","components/button/button.component.tsx","components/symbol-button-content/symbol-button-content.component.tsx","components/cell/cell.component.tsx","reducers/game/game.selector.tsx","components/counter/counter.component.tsx","utils/timerUtils.tsx","components/timer/timer.component.tsx","components/central-navbar/central-navbar.component.tsx","components/header/header.component.tsx","components/grid/grid.component.tsx","components/body/body.component.tsx","components/bottom-panel/bottom-panel.component.tsx","components/menu-drawer/menu.component.tsx","components/level-dialog/level-dialog.component.tsx","App.tsx","serviceWorker.ts","utils/gridUtils.tsx","utils/gridGeneratorUtils.tsx","reducers/game/data.tsx","reducers/game/game.reducer.tsx","reducers/rootReducer.tsx","index.tsx"],"names":["ActionTypes","isMobileDevice","some","toMatchItem","navigator","userAgent","match","DnDTypes","FlagImage","props","cellPosition","dispatch","useDispatch","useDrag","item","type","position","end","monitor","isFLagDroppedOutOfTable","getDropResult","dragNDropFlag","payload","cellToRemoveFlag","removeFlagFromCell","collect","isDragging","drag","preview","DragPreviewImage","connect","src","ref","width","height","style","opacity","alt","MobilePreviewForTouchEvent","usePreview","display","itemType","zIndex","top","left","Flags","id","className","Button","children","getClassName","isPressed","isFailed","isOver","SymbolButtonContent","symbol","fontSize","getClass","CellState","CellProps","number","state","this","INITIAL","onCellRightClick","event","preventDefault","cellRightClicked","onCellClick","cellClicked","ownProps","selectCellNumber","selectCellState","selectCellIsFailed","useEffect","cellClickFailed","useDrop","accept","drop","draggedFlag","destinationPosition","flagSourcePosition","flagPosition","x","y","isTheSameCell","OPEN","flagInitPosition","cellToAddFlag","removeFlagFromSourceCellAndAddToDestinationCell","handleDragNDropFlag","onClick","onContextMenu","getNumberContent","FLAGGED","getFlagContent","QUESTIONED","getButtonContent","selectGameState","gameState","selectGameGrid","createSelector","grid","selectIsGameFailed","isGameFailed","selectIsGameWon","isGameWon","selectIsGridGenerated","isGridCalculated","selectGameGridBombs","cells","selectClickedCell","cellsProps","cellProps","selectBombAmount","flat","filter","cell","length","selectFlagAmount","selectGameTime","gameTime","selectIsFlagSelected","isFlagSelected","selectIsCrossedFlagSelected","isFlagCrossedSelected","selectIsQuestionSelected","isQuestionSelected","selectIsRemoveQuestionSelected","isRemoveQuestionSelected","selectIsMagicWandSelected","isMagicWandSelected","selectIsMenuOpened","isMenuOpened","selectMagicWandCounter","magicWandCounter","selectIsLevelDialogOpened","isLevelDialogOpened","selectLevelParams","level","Counter","bombAmount","useSelector","flagAmount","formatInDoubleDigit","timeValue","intervalId","Timer","setInterval","incrementTime","clearInterval","timeSeconds","hours","Math","floor","minutes","seconds","toString","formatTime","CentralNavbar","levelParams","imageName","getSmileImageName","paddingTop","color","openMenuAction","startGame","Header","paddingLeft","cursor","mapStateToProps","createStructuredSelector","gameWon","numberOfColumns","numberOfRows","gridTemplateColumns","gridTemplateRows","map","cellProp","key","Body","marginBottom","BottomPanel","isCrossedFlagSelected","isIsMagicWandSelected","selectQuestion","selectCrossedQuestion","selectMagicWand","disableIdCounterZero","selectCrossedFlag","selectFlag","pointerEvents","DrawerMenu","open","onChange","isOpened","closeMenuAction","overlayColor","Toolbar","Typography","variant","marginLeft","MenuItem","ListItemIcon","ListItemText","primary","openLevelDialog","LevelDialog","useState","scaleValue","setScale","complexityValue","setComplexity","Dialog","onClose","closeLevelDialog","aria-labelledby","fullWidth","DialogTitle","DialogContent","FormControl","component","FormLabel","RadioGroup","aria-label","name","value","target","FormControlLabel","control","Radio","label","DialogActions","changeLevel","scale","complexity","App","Boolean","window","location","hostname","openCell","isPositionOutOfBound","i","j","generateDefaultGrid","numberGrid","cellGrid","Array","row","push","convertNumbersIntoCellProps","booleanGrid","array","convertBooleanGridToNumber","slice","convertArrayIntoGrid","random","shuffle","arrayLength","booleanArray","generateBooleanArray","moveBombsFromClickedCellAndCalculateGrid","gridCells","gridWithEmptyClickedCell","newX","newY","randomInt","isNewPositionInClickedCellArea","isBombCell","moveBombsFromClickedCellArea","forEach","plusOneToEveryoneAroundBomb","min","max","levelsTable","Map","magicWandAmount","INITIAL_LEVEL_PARAMS","get","INITIAL_STATE","createNewGameState","rerenderGridOnDragNDroppedFlag","removeFlagCell","handleOnDragNDroppedRemoveFlag","droppedCell","handleOnDragNDroppedFlag","isGameInProcess","every","isAllCellsOpened","openAllBombsGrid","cellArray","openAllBombs","rerenderGridOnClick","clickedCell","addFlag","removeFlag","addQuestion","removeQuestion","openCellSafely","handleOnClick","rerenderGridOnRightClick","handleOnRightClick","reducers","combineReducers","action","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","DndProvider","backend","TouchBackend","HTML5Backend","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0969ebb.chunk.js","sourcesContent":["import {CellPosition} from \"../components/cell/cell.component\";\nimport {GameLevel} from \"../components/level-dialog/level-dialog.component\";\nimport {LevelParams} from \"../reducers/game/data\";\n\nexport enum ActionTypes {\n    startGame,\n    cellClicked,\n    cellClickFailed,\n    gameWon,\n    cellRightClicked,\n    incrementTime,\n    dragNDropFlag,\n    selectFlag,\n    selectCrossedFlag,\n    selectQuestion,\n    selectCrossedQuestion,\n    selectMagicWand,\n    openMenuAction,\n    closeMenuAction,\n    openLevelDialog,\n    closeLevelDialog,\n    changeLevel,\n}\n\nexport interface StartGame {\n    type: ActionTypes.startGame,\n    payload: LevelParams\n}\n\nexport interface CellClicked {\n    type: ActionTypes.cellClicked,\n    payload: CellPosition\n}\n\nexport interface CellRightClicked {\n    type: ActionTypes.cellRightClicked,\n    payload: CellPosition\n}\n\nexport interface GameFailed {\n    type: ActionTypes.cellClickFailed,\n    payload: null\n}\n\nexport interface GameWon {\n    type: ActionTypes.gameWon,\n    payload: null\n}\n\nexport interface IncrementTime {\n    type: ActionTypes.incrementTime,\n    payload: null\n}\n\nexport interface DragNDropFlag {\n    type: ActionTypes.dragNDropFlag,\n    payload: {\n        cellToAddFlag?: CellPosition,\n        cellToRemoveFlag?: CellPosition\n    }\n}\n\nexport interface SelectFlagAction {\n    type: ActionTypes.selectFlag,\n    payload: null\n}\n\nexport interface SelectCrossedFlagAction {\n    type: ActionTypes.selectCrossedFlag,\n    payload: null\n}\n\nexport interface SelectQuestionAction {\n    type: ActionTypes.selectQuestion\n}\n\nexport interface SelectCrossedQuestion {\n    type: ActionTypes.selectCrossedQuestion\n}\n\nexport interface SelectMagicWand {\n    type: ActionTypes.selectMagicWand\n}\n\nexport interface OpenMenuAction {\n    type: ActionTypes.openMenuAction\n    payload: null\n}\n\nexport interface CloseMenuAction {\n    type: ActionTypes.closeMenuAction\n    payload: null\n}\n\nexport interface OpenLevelDialog {\n    type: ActionTypes.openLevelDialog\n    payload: null\n}\n\nexport interface CloseLevelDialog {\n    type: ActionTypes.closeLevelDialog\n    payload: null\n}\n\nexport interface ChangeLevel {\n    type: ActionTypes.changeLevel\n    payload: GameLevel\n}\n\nexport type Action = StartGame | CellClicked | GameFailed | GameWon | CellRightClicked | IncrementTime | DragNDropFlag | SelectFlagAction | SelectCrossedFlagAction | SelectQuestionAction | SelectCrossedQuestion | SelectMagicWand | OpenMenuAction | CloseMenuAction | OpenLevelDialog | CloseLevelDialog | ChangeLevel;","export function isMobileDevice() {\n    const toMatch = [\n        /Android/i,\n        /webOS/i,\n        /iPhone/i,\n        /iPad/i,\n        /iPod/i,\n        /BlackBerry/i,\n        /Windows Phone/i\n    ];\n\n    return toMatch.some((toMatchItem) => {\n        return navigator.userAgent.match(toMatchItem);\n    });\n}","import React from \"react\";\nimport './flag.style.css';\nimport {CellPosition} from \"../cell/cell.component\";\nimport {DragPreviewImage, DragSourceMonitor, useDrag} from \"react-dnd\";\nimport {SourceType} from \"dnd-core\";\nimport {useDispatch} from \"react-redux\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {Dispatch} from \"redux\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\n// @ts-ignore\nimport {usePreview} from 'react-dnd-preview';\n\nexport const DnDTypes = {\n    FLAG: 'flag'\n}\n\nexport interface FlagProps {\n    cellPosition?: CellPosition;\n}\n\nexport interface FlagDragObject {\n    type: SourceType,\n    position?: CellPosition\n}\n\nexport const FlagImage = (props: FlagProps) => {\n    const {cellPosition} = props\n    let dispatch = useDispatch();\n\n    const [{isDragging}, drag, preview] = useDrag<FlagDragObject, boolean, any>({\n        item: {\n            type: DnDTypes.FLAG,\n            position: props.cellPosition\n        },\n        end: (item, monitor: DragSourceMonitor) => {\n            let isFLagDroppedOutOfTable = !monitor.getDropResult();\n            if (cellPosition && isFLagDroppedOutOfTable) {\n                removeFlagFromCell(dispatch, cellPosition);\n            }\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    })\n\n    return (\n        <>\n            {\n                isMobileDevice()\n                    ? <MobilePreviewForTouchEvent/>\n                    : <DragPreviewImage connect={preview} src=\"flag_24x24.png\"/>\n            }\n            <img ref={drag} width=\"22\" height=\"22\" src=\"flag_24x24.png\"\n                 style={{opacity: cellPosition && isDragging ? 0.5 : 1}}\n                 alt=\"123\"/>\n        </>\n    )\n}\n\nfunction removeFlagFromCell(dispatch: Dispatch<Action>, cellPosition: CellPosition) {\n    dispatch({\n        type: ActionTypes.dragNDropFlag,\n        payload: {\n            cellToRemoveFlag: cellPosition\n        }\n    })\n}\n\nconst MobilePreviewForTouchEvent = () => {\n    const {display, itemType, item, style} = usePreview();\n    if (!display) {\n        return null;\n    }\n    if (itemType === DnDTypes.FLAG) {\n        return (\n            <img width=\"50\" height=\"50\" src=\"flag_big.png\" alt=\"123\" style={{...style, zIndex: 50, top: -10, left: -10}}/>\n        )\n    }\n    return null;\n};\n","import React from \"react\";\nimport './flags.style.css';\nimport {FlagImage} from \"../flag/flag.component\";\n\nexport const Flags = () => {\n\n    return (\n        <div id=\"drag_n_drop_flags_container_id\" className=\"drag_n_drop_flags_container\">\n            <div className=\"drag_n_drop_flag_1\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_2\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_3\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_4\">\n                <FlagImage/>\n            </div>\n        </div>\n    )\n}","import React, {FunctionComponent, PropsWithChildren} from \"react\";\nimport './button.style.css';\n\nexport interface ButtonProps {\n    isPressed: boolean;\n    isFailed?: boolean;\n    isOver?: boolean;\n    width?: number;\n    height?: number;\n    stroke?: number;\n}\n\nexport const Button: FunctionComponent<ButtonProps> = (props: PropsWithChildren<ButtonProps>) => {\n    const {\n        width = 30,\n        height = 30,\n        children\n    } = props;\n\n    return (\n        <div className=\"button_container\" style={{width, height}}>\n            <div className={getClassName(props) + \" content\"} style={{width, height}}>\n                {children}\n            </div>\n        </div>\n    )\n};\n\nfunction getClassName({isPressed, isFailed, isOver}: ButtonProps) {\n    let isPressedClassName = isPressed ? \"open\" : \"initial\";\n    let isFailedClassName = isFailed ? \"failedCell\" : \"\";\n    let isOverClassName = !isPressed && isOver ? \"over\" : \"\";\n\n    return isPressedClassName + \" \" + isFailedClassName + \" \" + isOverClassName;\n}\n","import React, {FunctionComponent} from \"react\";\nimport './symbol-button-content.style.css';\n\nexport interface NumberContentProps {\n    symbol: number | string;\n    fontSize: number;\n}\n\nexport const SymbolButtonContent: FunctionComponent<NumberContentProps> = ({symbol, fontSize}) => {\n\n    return (\n        <span className={getClass(symbol)} style={{fontSize: fontSize + \"pt\"}}>{symbol}</span>\n    )\n}\n\nfunction getClass(symbol: number | string) {\n    if (symbol === \"?\") {\n        return \"question\";\n    } else {\n        return \"number_\" + symbol;\n    }\n}\n","import React, {Dispatch, MouseEvent, useEffect} from \"react\";\nimport './cell.style.css';\nimport {connect, useDispatch} from \"react-redux\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {selectCellIsFailed, selectCellNumber, selectCellState} from \"../../reducers/game/game.selector\";\nimport {Button} from \"../button/button.component\";\nimport {SymbolButtonContent} from \"../symbol-button-content/symbol-button-content.component\";\nimport {FlagImage, DnDTypes, FlagDragObject} from \"../flag/flag.component\";\nimport {useDrop} from \"react-dnd\";\n\nexport enum CellState {\n    INITIAL,\n    FLAGGED,\n    QUESTIONED,\n    OPEN,\n}\n\nexport interface CellPosition {\n    x: number;\n    y: number;\n}\n\nexport class CellProps {\n    position: CellPosition;\n    number: number;\n    state: CellState;\n    isFailed: boolean;\n\n    constructor(position: CellPosition, number: number) {\n        this.position = position;\n        this.number = number;\n        this.state = CellState.INITIAL;\n        this.isFailed = false;\n    }\n}\n\nconst GridCell = (props: CellProps) => {\n\n    const {position, number, state, isFailed} = props;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isFailed) {\n            dispatch({type: ActionTypes.cellClickFailed});\n        }\n    });\n\n    const [{isOver}, drop] = useDrop<FlagDragObject, any, any>({\n        accept: DnDTypes.FLAG,\n        drop: (item: FlagDragObject) => handleDragNDropFlag(item, position, state, dispatch),\n        collect: monitor => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    return (\n        <div id={props.position.x + \"_\" + props.position.y} className=\"gridCell\"\n             onClick={onCellClick(position, dispatch)}\n             onContextMenu={onCellRightClick(position, dispatch)}>\n            <div ref={drop}>\n                <Button isPressed={state === CellState.OPEN} isFailed={isFailed} isOver={isOver}>\n                    {\n                        getButtonContent(state, number, position)\n                    }\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nfunction onCellRightClick(position: CellPosition, dispatch: Dispatch<any>) {\n    return (event: MouseEvent) => {\n        // prevent opening contextual menu on right button click\n        event.preventDefault();\n        dispatch({type: ActionTypes.cellRightClicked, payload: position})\n    }\n}\n\nfunction onCellClick(position: CellPosition, dispatch: Dispatch<Action>) {\n    return () => {\n        dispatch({type: ActionTypes.cellClicked, payload: position})\n    };\n}\n\nfunction getButtonContent(state: CellState, number: number, position: CellPosition) {\n    switch (state) {\n        case CellState.INITIAL:\n            return null;\n        case CellState.OPEN:\n            if (number === -1) {\n                return getBombContent();\n            } else if (number > 0) {\n                return getNumberContent(number);\n            } else {\n                return null;\n            }\n        case CellState.FLAGGED:\n            return getFlagContent(position);\n        case CellState.QUESTIONED:\n            return getQuestionContent();\n    }\n}\n\nfunction getQuestionContent() {\n    return (\n        <SymbolButtonContent symbol={\"?\"} fontSize={18}/>\n    );\n}\n\nfunction getFlagContent(position: CellPosition) {\n    return (\n            <FlagImage cellPosition={position}/>\n    );\n}\n\nfunction getBombContent() {\n    return (\n        <img className=\"bomb\" width=\"33\" height=\"33\" src=\"bomb.svg\" alt=\"123\"/>\n    );\n}\n\nfunction getNumberContent(number: number) {\n    return (\n        <SymbolButtonContent symbol={number} fontSize={18}/>\n    );\n}\n\nfunction handleDragNDropFlag(draggedFlag: FlagDragObject, destinationPosition: CellPosition, state: CellState, dispatch: Dispatch<any>) {\n    let flagSourcePosition = draggedFlag.position;\n    if (isTheSameCell(flagSourcePosition, destinationPosition) || state === CellState.OPEN) {\n        return;\n    }\n    removeFlagFromSourceCellAndAddToDestinationCell(dispatch, destinationPosition, flagSourcePosition);\n}\n\nfunction isTheSameCell(flagPosition: CellPosition | undefined, position: CellPosition) {\n    return flagPosition && ((flagPosition.x === position.x) && (flagPosition.y === position.y));\n}\n\nfunction removeFlagFromSourceCellAndAddToDestinationCell(dispatch: (value: any) => void, position: CellPosition, flagInitPosition: CellPosition | undefined) {\n    dispatch({\n        type: ActionTypes.dragNDropFlag,\n        payload: {\n            cellToAddFlag: position,\n            cellToRemoveFlag: flagInitPosition\n        }\n    })\n}\n\nconst mapStateToProps = (state: AppState, ownProps: CellProps): CellProps => ({\n    position: ownProps.position,\n    number: selectCellNumber(ownProps.position)(state),\n    state: selectCellState(ownProps.position)(state),\n    isFailed: selectCellIsFailed(ownProps.position)(state)\n})\n\nexport default connect(mapStateToProps)(GridCell)","import {createSelector} from 'reselect';\nimport {AppState} from \"../rootReducer\";\nimport {GameState, Grid} from \"./game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../../components/cell/cell.component\";\nimport {LevelParams} from \"./data\";\n\nconst selectGameState = (state: AppState): GameState => state.gameState;\n\nexport const selectGameGrid = createSelector<AppState, GameState, Grid>(\n    [selectGameState],\n    (gameState: GameState) => gameState.grid\n);\n\nexport const selectIsGameFailed = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameFailed\n)\n\nexport const selectIsGameWon = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameWon\n)\n\nexport const selectIsGridGenerated = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGridCalculated\n)\n\nexport const selectGameGridBombs = createSelector<AppState, Grid, CellProps[][]>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells\n)\n\nexport const selectClickedCell = (position: CellPosition) => createSelector<AppState, CellProps[][], CellProps>(\n    [selectGameGridBombs],\n    (cellsProps: CellProps[][]) => cellsProps[position.y][position.x]\n)\n\nexport const selectCellNumber = (position: CellPosition) => createSelector<AppState, CellProps, number>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.number\n)\n\nexport const selectCellState = (position: CellPosition) => createSelector<AppState, CellProps, CellState>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.state\n)\n\nexport const selectCellIsFailed = (position: CellPosition) => createSelector<AppState, CellProps, boolean>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.isFailed\n)\n\nexport const selectBombAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.number === -1).length\n)\n\nexport const selectFlagAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.state === CellState.FLAGGED).length\n)\n\nexport const selectGameTime = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.gameTime\n)\n\nexport const selectIsFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagSelected\n)\n\nexport const selectIsCrossedFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagCrossedSelected\n)\n\nexport const selectIsQuestionSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isQuestionSelected\n)\n\nexport const selectIsRemoveQuestionSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isRemoveQuestionSelected\n)\n\nexport const selectIsMagicWandSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isMagicWandSelected\n)\n\nexport const selectIsMenuOpened = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isMenuOpened\n)\n\nexport const selectMagicWandCounter = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.magicWandCounter\n)\n\nexport const selectIsLevelDialogOpened = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isLevelDialogOpened\n)\n\nexport const selectLevelParams = createSelector<AppState, GameState, LevelParams>(\n    [selectGameState],\n    (gameState: GameState) => gameState.level\n)","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectBombAmount, selectFlagAmount} from \"../../reducers/game/game.selector\";\nimport './counter.style.css';\n\nexport const Counter = () => {\n\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    return (\n        <div>\n            <div className=\"bomb_amount_container\"><span className=\"bomb_amount\">{bombAmount - flagAmount}</span></div>\n            <div className=\"image_container\"><img className=\"bomb_image\" src=\"bomb.svg\" alt=\"123\"/></div>\n        </div>\n    )\n}","export function formatTime(timeSeconds: number): string {\n    const hours = Math.floor(timeSeconds / 3600);\n    const minutes = Math.floor((timeSeconds % 3600) / 60);\n    const seconds = (timeSeconds % 3600) % 60;\n    return formatInDoubleDigit(hours.toString()) + \":\" + formatInDoubleDigit(minutes.toString()) + \":\" + formatInDoubleDigit(seconds.toString());\n}\n\nfunction formatInDoubleDigit(timeValue: string) {\n    if (timeValue.length === 0) {\n        return \"00\";\n    } else if(timeValue.length === 1) {\n        return \"0\" + timeValue;\n    } else {\n        return timeValue;\n    }\n}\n","import React, {useEffect} from \"react\";\nimport {formatTime} from \"../../utils/timerUtils\";\nimport './timer.style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectGameTime} from \"../../reducers/game/game.selector\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nlet intervalId: NodeJS.Timeout;\n\nexport const Timer = () => {\n    const gameTime = useSelector(selectGameTime);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        intervalId = setInterval(\n            () => dispatch({type: ActionTypes.incrementTime}),\n            1000\n        );\n\n        return () => {\n            clearInterval(intervalId);\n        }\n    })\n\n    return (\n        <div>\n            <span className=\"timer_span\">{formatTime(gameTime)}</span>\n        </div>\n    );\n}","import React from \"react\";\nimport './central-navbar.style.css';\nimport {Flags} from \"../flags/flags.component\";\nimport {Counter} from \"../counter/counter.component\";\nimport {Timer} from \"../timer/timer.component\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectBombAmount,\n    selectFlagAmount,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectLevelParams\n} from \"../../reducers/game/game.selector\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {LevelParams} from \"../../reducers/game/data\";\n\nexport const CentralNavbar = () => {\n\n    const dispatch = useDispatch();\n\n    const levelParams = useSelector(selectLevelParams);\n\n    const isGameWon = useSelector(selectIsGameWon)\n    const isGameFailed = useSelector(selectIsGameFailed)\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    let imageName = getSmileImageName(isGameFailed, isGameWon, bombAmount, flagAmount);\n\n    return (\n        <div className=\"central-navbar\">\n            <div className=\"flags\">\n                {\n                    isMobileDevice()\n                        ? <MenuIcon fontSize=\"large\" style={{paddingTop: 10}} color=\"action\" onClick={() => dispatch({type: ActionTypes.openMenuAction})}/>\n                        : <Flags/>\n                }\n            </div>\n            <div className=\"counter\">\n                <Counter/>\n            </div>\n            <div className=\"smile\">\n                <img className=\"smile_image\" src={\"smiles/\" + imageName} alt=\"fail\" onClick={startGame(dispatch, levelParams)}/>\n            </div>\n            <div className=\"timer\">\n                <Timer/>\n            </div>\n        </div>\n    )\n}\n\nfunction getSmileImageName(isGameFailed: boolean, isGameWon: boolean, bombAmount: number, flagAmount: number) {\n    if (isGameFailed) {\n        return \"failed.png\";\n    } else if (isGameWon) {\n        return \"win.png\";\n    } else if (bombAmount < flagAmount) {\n        return \"laugh.png\";\n    } else {\n        return \"start.png\";\n    }\n}\n\nfunction startGame(dispatch: React.Dispatch<Action>, levelParams: LevelParams) {\n    return () => dispatch({\n        type: ActionTypes.startGame,\n        payload: levelParams\n    })\n}","import React, {Dispatch} from \"react\";\nimport \"./header.style.css\";\nimport {CentralNavbar} from \"../central-navbar/central-navbar.component\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useDispatch} from \"react-redux\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"header\">\n            {\n                !isMobileDevice() &&\n                <div className=\"left_box\">\n                    <MenuIcon\n                        fontSize=\"large\"\n                        style={{paddingTop: 10, paddingLeft: 10, cursor: \"pointer\"}}\n                        color=\"action\"\n                        onClick={() => dispatch({type: ActionTypes.openMenuAction})}/>\n                </div>\n            }\n            <div className=\"centered_box\">\n                <CentralNavbar/>\n            </div>\n            {\n                !isMobileDevice() &&\n                <div className=\"right_box\">\n                </div>\n            }\n        </div>\n    )\n}","import React, {useEffect} from \"react\";\nimport GridCell, {CellProps} from \"../cell/cell.component\";\nimport './grid.style.css';\nimport {GameState} from \"../../reducers/game/game.reducer\";\nimport {createStructuredSelector} from \"reselect\";\nimport {\n    selectGameGrid,\n    selectGameTime,\n    selectIsCrossedFlagSelected,\n    selectIsFlagSelected,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectIsGridGenerated,\n    selectIsLevelDialogOpened,\n    selectIsMagicWandSelected,\n    selectIsMenuOpened,\n    selectIsQuestionSelected,\n    selectIsRemoveQuestionSelected,\n    selectLevelParams,\n    selectMagicWandCounter\n} from \"../../reducers/game/game.selector\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nconst GridComponent = (props: GameState) => {\n\n    const {\n        isGameWon,\n        isGameFailed,\n        grid,\n        level\n    } = props;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isGameWon) {\n            dispatch({type: ActionTypes.gameWon})\n        }\n    })\n\n    const numberOfColumns = level.width;\n    const numberOfRows = level.height;\n\n    return (\n        <div className={\"grid\" + (isGameFailed || isGameWon ? \" disabled\" : \"\")}  style={{\n            gridTemplateColumns: `repeat(${numberOfColumns}, 33px)`,\n            gridTemplateRows: `repeat(${numberOfRows}, 33px)`\n        }}>\n            {\n                grid.cells.map((cellProps: Array<CellProps>) =>\n                    cellProps.map(cellProp => <GridCell\n                        key={cellProp.position.x + \"x\" + cellProp.position.y} {...cellProp}/>))\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, GameState>({\n    grid: selectGameGrid,\n    isGameFailed: selectIsGameFailed,\n    isGameWon: selectIsGameWon,\n    isGridCalculated: selectIsGridGenerated,\n    gameTime: selectGameTime,\n    isFlagSelected: selectIsFlagSelected,\n    isFlagCrossedSelected: selectIsCrossedFlagSelected,\n    isQuestionSelected: selectIsQuestionSelected,\n    isRemoveQuestionSelected: selectIsRemoveQuestionSelected,\n    isMagicWandSelected: selectIsMagicWandSelected,\n    isMenuOpened: selectIsMenuOpened,\n    magicWandCounter: selectMagicWandCounter,\n    isLevelDialogOpened: selectIsLevelDialogOpened,\n    level: selectLevelParams,\n})\n\nexport default connect(mapStateToProps)(GridComponent)","import React from \"react\";\nimport './body.style.css';\nimport GridComponent from \"../grid/grid.component\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\n\nexport const Body = () => {\n    return (\n        <div className=\"body_container\">\n            <div className=\"body\" style={isMobileDevice() ? {marginBottom: \"80px\"} : {}}>\n                <GridComponent/>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectIsCrossedFlagSelected,\n    selectIsFlagSelected,\n    selectIsMagicWandSelected,\n    selectIsQuestionSelected,\n    selectIsRemoveQuestionSelected, selectMagicWandCounter\n} from \"../../reducers/game/game.selector\";\nimport './bottom-panel.style.css';\nimport {Button} from \"../button/button.component\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nexport const BottomPanel = () => {\n\n    const dispatch = useDispatch();\n    const isFlagSelected = useSelector(selectIsFlagSelected);\n    const isCrossedFlagSelected = useSelector(selectIsCrossedFlagSelected);\n    const isQuestionSelected = useSelector(selectIsQuestionSelected);\n    const isRemoveQuestionSelected = useSelector(selectIsRemoveQuestionSelected);\n    const isIsMagicWandSelected = useSelector(selectIsMagicWandSelected);\n    const magicWandCounter = useSelector(selectMagicWandCounter);\n\n    const buttonWidth = 60;\n    const buttonHeight = 60;\n    const smallButtonWidth = 30;\n    const smallButtonHeight = 30;\n\n    return (\n        <div className=\"bottom_panel\">\n            <div className=\"questions\">\n                <div className=\"add_question\" onClick={() => dispatch({type: ActionTypes.selectQuestion})}>\n                    <Button isPressed={isQuestionSelected} height={buttonHeight} width={buttonWidth}>\n                        <img width=\"44\" height=\"44\" src=\"question.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n                <div className=\"remove_question small_button\" onClick={() => dispatch({type: ActionTypes.selectCrossedQuestion})}>\n                    <Button isPressed={isRemoveQuestionSelected} height={smallButtonHeight} width={smallButtonWidth}>\n                        <img width=\"22\" height=\"22\" src=\"crossed_question.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n            </div>\n            <div className=\"magic_wand\" onClick={() => dispatch({type: ActionTypes.selectMagicWand})} style={disableIdCounterZero(magicWandCounter)}>\n                <Button isPressed={isIsMagicWandSelected} height={buttonHeight} width={buttonWidth}>\n                    <img width=\"44\" height=\"44\" src=\"magic_wand.png\" alt=\"123\"/>\n                    <span className=\"magic_wand_counter\">{magicWandCounter}</span>\n                </Button>\n            </div>\n            <div className=\"flags\">\n                <div className=\"remove_flag small_button\" onClick={() => dispatch({type: ActionTypes.selectCrossedFlag})}>\n                    <Button isPressed={isCrossedFlagSelected} height={smallButtonHeight} width={smallButtonWidth}>\n                        <img width=\"22\" height=\"22\" src=\"crossed_flag.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n                <div className=\"add_flag\" onClick={() => dispatch({type: ActionTypes.selectFlag})}>\n                    <Button isPressed={isFlagSelected} height={buttonHeight} width={buttonWidth}>\n                        <img width=\"44\" height=\"44\" src=\"flag_big.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction disableIdCounterZero(magicWandCounter: number): React.CSSProperties | undefined {\n    return magicWandCounter <= 0 ? {pointerEvents: \"none\", opacity: 0.5} : {};\n}\n","import React from \"react\";\nimport './menu.style.css';\nimport {ListItemIcon, ListItemText, MenuItem, Toolbar, Typography} from \"@material-ui/core\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport HelpIcon from '@material-ui/icons/Help';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {ActionTypes} from \"../../actions/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\n// @ts-ignore\nimport Drawer from 'react-motion-drawer';\nimport {selectIsMenuOpened} from \"../../reducers/game/game.selector\";\n\nexport const DrawerMenu = () => {\n\n    const dispatch = useDispatch();\n    const isMenuOpened = useSelector(selectIsMenuOpened);\n\n    return (\n        <Drawer className=\"drawer-menu\" open={isMenuOpened}\n                onChange={(isOpened: boolean) =>\n                    isOpened\n                        ? dispatch({type: ActionTypes.openMenuAction})\n                        : dispatch({type: ActionTypes.closeMenuAction})}\n                overlayColor=\"rgba(0, 0, 0, 0.4)\" width={250}>\n            <Toolbar>\n                <Typography variant=\"h6\">\n                    Menu\n                </Typography>\n                <CloseIcon\n                    fontSize=\"large\"\n                    color=\"action\"\n                    style={{marginLeft: \"auto\", cursor: \"pointer\"}}\n                    onClick={() => dispatch({type: ActionTypes.closeMenuAction})}/>\n            </Toolbar>\n            <MenuItem>\n                <ListItemIcon>\n                    <TuneIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText primary=\"Level\" onClick={() => dispatch({type: ActionTypes.openLevelDialog})}/>\n            </MenuItem>\n            <MenuItem>\n                <ListItemIcon>\n                    <SettingsIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText primary=\"Settings\"/>\n            </MenuItem>\n            <MenuItem>\n                <ListItemIcon>\n                    <HelpIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText primary=\"Help\"/>\n            </MenuItem>\n        </Drawer>\n    )\n}","import React, {useState} from \"react\";\nimport './level-dialog.style.css';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    ListItemIcon,\n    Radio,\n    RadioGroup,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectIsLevelDialogOpened} from \"../../reducers/game/game.selector\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nexport type GameComplexity = \"easy\" | \"medium\" | \"hard\" | \"crazy\";\nexport type GameScale = \"small\" | \"medium\" | \"big\" | \"huge\";\n\nexport interface GameLevel {\n    scale: GameScale\n    complexity: GameComplexity\n}\n\nexport const LevelDialog = () => {\n\n    const [scaleValue, setScale] = useState(\"small\");\n    const [complexityValue, setComplexity] = useState(\"easy\");\n\n    const handleChangeScale = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setScale((event.target as HTMLInputElement).value);\n    };\n\n    const handleChangeComplexity = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setComplexity((event.target as HTMLInputElement).value);\n    }\n\n    const dispatch = useDispatch();\n    const isLevelDialogOpened = useSelector(selectIsLevelDialogOpened);\n\n    return (\n        <Dialog open={isLevelDialogOpened} onClose={() => dispatch({type: ActionTypes.closeLevelDialog})}\n                aria-labelledby=\"form-dialog-title\" fullWidth={true}>\n            <DialogTitle id=\"form-dialog-title\">\n                <Toolbar>\n                    <ListItemIcon>\n                        <TuneIcon fontSize=\"small\"/>\n                    </ListItemIcon>\n                    <Typography variant=\"h6\">Level</Typography>\n                </Toolbar>\n            </DialogTitle>\n            <DialogContent>\n                <div className=\"dialog_content\">\n                    <div className=\"radio_group\">\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Field scale</FormLabel>\n                            <RadioGroup aria-label=\"scale\" name=\"scale\" value={scaleValue} onChange={handleChangeScale}>\n                                <FormControlLabel value=\"small\" control={<Radio color=\"primary\"/>} label=\"Small\"/>\n                                <FormControlLabel value=\"medium\" control={<Radio color=\"primary\"/>} label=\"Medium\"/>\n                                <FormControlLabel value=\"big\" control={<Radio color=\"primary\"/>} label=\"Big\"/>\n                                <FormControlLabel value=\"huge\" control={<Radio color=\"secondary\"/>} label=\"Huge\"/>\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                    <div className=\"radio_group\">\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Complexity</FormLabel>\n                            <RadioGroup aria-label=\"complexity\" name=\"complexity\" value={complexityValue}\n                                        onChange={handleChangeComplexity}>\n                                <FormControlLabel value=\"easy\" control={<Radio color=\"primary\"/>} label=\"Easy\"/>\n                                <FormControlLabel value=\"medium\" control={<Radio color=\"primary\"/>} label=\"Medium\"/>\n                                <FormControlLabel value=\"hard\" control={<Radio color=\"primary\"/>} label=\"Hard\"/>\n                                <FormControlLabel value=\"crazy\" control={<Radio color=\"secondary\"/>} label=\"I'm crazy\"/>\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                </div>\n                <DialogActions>\n                    <Button onClick={() => dispatch({type: ActionTypes.closeLevelDialog})} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => dispatch({\n                        type: ActionTypes.changeLevel,\n                        payload: {scale: scaleValue, complexity: complexityValue}\n                    })} color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </DialogContent>\n        </Dialog>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/header/header.component\";\nimport {Body} from \"./components/body/body.component\";\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\nimport {BottomPanel} from \"./components/bottom-panel/bottom-panel.component\";\nimport {DrawerMenu} from \"./components/menu-drawer/menu.component\";\nimport {LevelDialog} from \"./components/level-dialog/level-dialog.component\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <DrawerMenu/>\n            <Header/>\n            <Body/>\n            {\n                isMobileDevice() && <BottomPanel/>\n            }\n\n            <LevelDialog/>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Grid} from \"../reducers/game/game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../components/cell/cell.component\";\n\nexport function handleOnClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED || clickedCell.state === CellState.QUESTIONED) {\n        return;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.isFailed = true;\n    }\n\n    openCell(cells, clickedCell.position)\n}\n\nexport function addFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state !== CellState.OPEN) {\n        clickedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function removeFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED) {\n        clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function addQuestion(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state !== CellState.OPEN) {\n        clickedCell.state = CellState.QUESTIONED;\n    }\n}\n\nexport function removeQuestion(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.QUESTIONED) {\n        clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openCellSafely(cells: CellProps[][], cellPosition: CellPosition): boolean {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.OPEN || clickedCell.state === CellState.FLAGGED) {\n        return false;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.state = CellState.FLAGGED;\n    } else {\n        openCell(cells, clickedCell.position)\n    }\n    return true;\n}\n\nexport function handleOnRightClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n    switch (clickedCell.state) {\n        case CellState.INITIAL:\n            clickedCell.state = CellState.FLAGGED;\n            break;\n        case CellState.FLAGGED:\n            clickedCell.state = CellState.QUESTIONED;\n            break;\n        case CellState.QUESTIONED:\n            clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function handleOnDragNDroppedFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const droppedCell = cells[cellPosition.y][cellPosition.x];\n    if (droppedCell.state === CellState.INITIAL || droppedCell.state === CellState.QUESTIONED) {\n        droppedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function handleOnDragNDroppedRemoveFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const removeFlagCell = cells[cellPosition.y][cellPosition.x];\n    if (removeFlagCell.state !== CellState.OPEN) {\n        removeFlagCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openAllBombs(grid: Grid): void {\n    grid.cells.forEach(cellArray => cellArray.forEach(cell => {\n        if (cell.number === -1 && cell.state !== CellState.FLAGGED) {\n            cell.state = CellState.OPEN;\n        }\n    }));\n}\n\nexport function isAllCellsOpened(cells: Array<Array<CellProps>>) {\n    return cells.flat()\n        .filter(cell => cell.number !== -1)\n        .every(cell => cell.state === CellState.OPEN)\n}\n\nfunction openCell(cells: CellProps[][], cellPosition: CellPosition) {\n    if (isPositionOutOfBound(cells, cellPosition)) {\n        return;\n    }\n\n    const cell = cells[cellPosition.y][cellPosition.x];\n    if (cell.state === CellState.OPEN) {\n        return; // to avoid looping on neighbouring empty cells\n    }\n    cell.state = CellState.OPEN;\n\n    // open all cells around\n    if (cell.number === 0) {\n        for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n            for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n                if (i === cellPosition.x && j === cellPosition.y) {\n                    continue;\n                }\n\n                openCell(cells, {x: i, y: j})\n            }\n        }\n    }\n}\n\nexport function isPositionOutOfBound(grid: Array<Array<CellProps>>, cellPosition: CellPosition) {\n    return cellPosition.x < 0 || cellPosition.y < 0\n        || cellPosition.x >= grid.length || cellPosition.y >= grid[0].length;\n}\n","import {CellPosition, CellProps} from \"../components/cell/cell.component\";\nimport {isPositionOutOfBound} from \"./gridUtils\";\nimport {LevelParams} from \"../reducers/game/data\";\n\nexport function generateDefaultGrid({width, height, bombAmount}: LevelParams): Array<Array<CellProps>> {\n    let booleanArray = generateBooleanArray(width, height, bombAmount);\n    let shuffledBooleanArray = shuffle(booleanArray);\n    let booleanGrid = convertArrayIntoGrid(shuffledBooleanArray, width, height);\n    let numberGrid = convertBooleanGridToNumber(booleanGrid);\n    return convertNumbersIntoCellProps(numberGrid);\n}\n\nexport function moveBombsFromClickedCellAndCalculateGrid(gridCells: Array<Array<CellProps>>, position: CellPosition): Array<Array<CellProps>> {\n    let gridWithEmptyClickedCell = moveBombsFromClickedCellArea(position, gridCells)\n    return calculateCellBombNumbers(gridWithEmptyClickedCell);\n}\n\nexport function moveBombsFromClickedCellArea(position: CellPosition, grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    for (let i = position.x - 1; i <= position.x + 1; i++) {\n        for (let j = position.y - 1; j <= position.y + 1; j++) {\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number === -1) {\n                let newX;\n                let newY;\n                do {\n                    newX = randomInt(0, grid[0].length - 1);\n                    newY = randomInt(0, grid.length - 1);\n                } while(isNewPositionInClickedCellArea(newX, newY, position) || isBombCell(newX, newY, grid))\n                cell.number = 0;\n                grid[newY][newX].number = -1;\n            }\n        }\n    }\n    return grid;\n}\n\nfunction isBombCell(x: number, y: number, grid: Array<Array<CellProps>>) {\n    return grid[y][x].number === -1;\n}\n\nfunction isNewPositionInClickedCellArea(newX: number, newY: number, position: CellPosition) {\n    return (newX >= position.x - 1 && newX <= position.x + 1) && (newY >= position.y - 1 && newY <= position.y + 1);\n}\n\nfunction randomInt(min: number, max: number): number {\n    return min + Math.floor((max - min) * Math.random());\n}\n\nexport function generateBooleanArray(width: number, height: number, bombAmount: number): Array<boolean> {\n    const arrayLength = width * height;\n    const booleanArray = new Array<boolean>();\n\n    for (let i = 0; i < arrayLength; i++) {\n        if (i < bombAmount) {\n            booleanArray.push(true);\n        } else {\n            booleanArray.push(false);\n        }\n    }\n\n    return booleanArray;\n}\n\nfunction shuffle(array: Array<boolean>): Array<boolean> {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport function convertArrayIntoGrid<T>(array: Array<T>, width: number, height: number): Array<Array<T>> {\n    const grid = new Array<Array<T>>();\n\n    for (let i = 0; i < height; i++) {\n        grid.push(array.slice(width * i, width * (i + 1)));\n    }\n\n    return grid;\n}\n\nexport function convertBooleanGridToNumber(booleanGrid: Array<Array<boolean>>): Array<Array<number>> {\n    return booleanGrid.map((array: Array<boolean>) => array.map((cell: boolean) => cell ? -1 : 0));\n}\n\nexport function convertNumbersIntoCellProps(numberGrid: Array<Array<number>>): Array<Array<CellProps>> {\n    const cellGrid = new Array<Array<CellProps>>();\n\n    for (let i = 0; i < numberGrid.length; i++) {\n        let row = new Array<CellProps>();\n        for (let j = 0; j < numberGrid[0].length; j++) {\n            row.push(new CellProps({x: j, y: i}, numberGrid[i][j]))\n        }\n        cellGrid.push(row);\n    }\n\n    return cellGrid;\n}\n\nexport function calculateCellBombNumbers(grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    grid.forEach((array: Array<CellProps>) => array.forEach((cell: CellProps) => {\n        if (cell.number === -1) {\n            plusOneToEveryoneAroundBomb(cell.position, grid)\n        }\n    }))\n\n    return grid;\n}\n\nexport function plusOneToEveryoneAroundBomb(cellPosition: CellPosition, grid: Array<Array<CellProps>>) {\n    for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n        for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n            if (i === cellPosition.x && j === cellPosition.y) {\n                continue;\n            }\n\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number !== -1) {\n                cell.number += 1;\n            }\n        }\n    }\n}\n\n","import {GameComplexity, GameScale} from \"../../components/level-dialog/level-dialog.component\";\n\nexport interface LevelParams {\n    width: number,\n    height: number,\n    bombAmount: number,\n    magicWandAmount: number\n}\n\nexport const levelsTable = new Map<GameScale, Map<GameComplexity, LevelParams>>([\n    [\"small\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 10, height: 10, bombAmount: 15, magicWandAmount: 3}],\n        [\"medium\", {width: 10, height: 10, bombAmount: 20, magicWandAmount: 3}],\n        [\"hard\", {width: 10, height: 10, bombAmount: 25, magicWandAmount: 3}],\n        [\"crazy\", {width: 10, height: 10, bombAmount: 30, magicWandAmount: 3}]\n    ])],\n    [\"medium\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 20, height: 20, bombAmount: 60, magicWandAmount: 6}],\n        [\"medium\", {width: 20, height: 20, bombAmount: 80, magicWandAmount: 6}],\n        [\"hard\", {width: 20, height: 20, bombAmount: 100, magicWandAmount: 6}],\n        [\"crazy\", {width: 20, height: 20, bombAmount: 120, magicWandAmount: 6}]\n    ])],\n    [\"big\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 30, height: 30, bombAmount: 135, magicWandAmount: 10}],\n        [\"medium\", {width: 30, height: 30, bombAmount: 180, magicWandAmount: 10}],\n        [\"hard\", {width: 30, height: 30, bombAmount: 225, magicWandAmount: 10}],\n        [\"crazy\", {width: 30, height: 30, bombAmount: 270, magicWandAmount: 10}]\n    ])],\n    [\"huge\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 50, height: 50, bombAmount: 375, magicWandAmount: 15}],\n        [\"medium\", {width: 50, height: 50, bombAmount: 500, magicWandAmount: 15}],\n        [\"hard\", {width: 50, height: 50, bombAmount: 625, magicWandAmount: 15}],\n        [\"crazy\", {width: 50, height: 50, bombAmount: 750, magicWandAmount: 15}]\n    ])]\n])","import {Action, ActionTypes} from \"../../actions/actions\";\nimport {CellPosition, CellProps} from \"../../components/cell/cell.component\";\nimport {\n    addFlag,\n    addQuestion,\n    handleOnClick,\n    handleOnDragNDroppedFlag,\n    handleOnDragNDroppedRemoveFlag,\n    handleOnRightClick,\n    isAllCellsOpened,\n    openAllBombs,\n    openCellSafely,\n    removeFlag,\n    removeQuestion\n} from \"../../utils/gridUtils\";\nimport {generateDefaultGrid, moveBombsFromClickedCellAndCalculateGrid} from \"../../utils/gridGeneratorUtils\";\nimport {LevelParams, levelsTable} from \"./data\";\n\nexport interface Grid {\n    cells: Array<Array<CellProps>>\n}\n\nexport interface GameState {\n    isGameWon: boolean;\n    isGameFailed: boolean\n    isGridCalculated: boolean;\n    gameTime: number;\n    isFlagSelected: boolean;\n    isFlagCrossedSelected: boolean;\n    isQuestionSelected: boolean;\n    isRemoveQuestionSelected: boolean;\n    isMagicWandSelected: boolean;\n    magicWandCounter: number;\n    isMenuOpened: boolean;\n    isLevelDialogOpened: boolean;\n    level: LevelParams,\n    grid: Grid;\n}\n\nexport const INITIAL_LEVEL_PARAMS: LevelParams = levelsTable.get(\"small\")?.get(\"easy\") as LevelParams;\n\nexport const INITIAL_STATE: GameState = {\n    isGameWon: false,\n    isGameFailed: false,\n    isGridCalculated: false,\n    gameTime: 0,\n    isFlagSelected: false,\n    isFlagCrossedSelected: false,\n    isQuestionSelected: false,\n    isRemoveQuestionSelected: false,\n    isMagicWandSelected: false,\n    magicWandCounter: INITIAL_LEVEL_PARAMS.magicWandAmount,\n    isMenuOpened: false,\n    isLevelDialogOpened: false,\n    level: INITIAL_LEVEL_PARAMS,\n    grid: {\n        cells: generateDefaultGrid(INITIAL_LEVEL_PARAMS)\n    }\n}\n\nexport const gameReducer = (state: GameState = INITIAL_STATE, action: Action): GameState => {\n    switch (action.type) {\n        case ActionTypes.startGame:\n            return createNewGameState(action.payload);\n        case ActionTypes.cellClicked:\n            let cells = rerenderGridOnClick(state, action.payload);\n            return {\n                ...state,\n                grid: {\n                    cells: cells\n                },\n                isGameWon: isGameWon(cells),\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case ActionTypes.cellClickFailed:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n                isGameFailed: true,\n            }\n        case ActionTypes.cellRightClicked:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnRightClick(state.grid.cells, action.payload),\n                }\n            }\n        case ActionTypes.gameWon:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n            }\n        case ActionTypes.incrementTime:\n            return {\n                ...state,\n                gameTime: isGameInProcess(state) ? state.gameTime + 1 : state.gameTime,\n            }\n        case ActionTypes.dragNDropFlag:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnDragNDroppedFlag(state.grid.cells, action.payload.cellToAddFlag, action.payload.cellToRemoveFlag),\n                }\n            }\n        case ActionTypes.selectFlag:\n            return {\n                ...state,\n                isFlagSelected: !state.isFlagSelected,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case ActionTypes.selectCrossedFlag:\n            return {\n                ...state,\n                isFlagCrossedSelected: !state.isFlagCrossedSelected,\n                isFlagSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case ActionTypes.selectQuestion:\n            return {\n                ...state,\n                isQuestionSelected: !state.isQuestionSelected,\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case ActionTypes.selectCrossedQuestion:\n            return {\n                ...state,\n                isRemoveQuestionSelected: !state.isRemoveQuestionSelected,\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case ActionTypes.selectMagicWand:\n            return {\n                ...state,\n                isMagicWandSelected: state.isMagicWandSelected ? false : state.isGridCalculated && state.magicWandCounter > 0,\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false\n            }\n        case ActionTypes.openMenuAction:\n            return {\n                ...state,\n                isMenuOpened: true\n            }\n        case ActionTypes.closeMenuAction:\n            return {\n                ...state,\n                isMenuOpened: false\n            }\n        case ActionTypes.openLevelDialog:\n            return {\n                ...state,\n                isLevelDialogOpened: true,\n                isMenuOpened: false\n            }\n        case ActionTypes.closeLevelDialog:\n            return {\n                ...state,\n                isLevelDialogOpened: false\n            }\n        case ActionTypes.changeLevel:\n            const levelParams: LevelParams = levelsTable.get(action.payload.scale)?.get(action.payload.complexity) as LevelParams;\n            return createNewGameState(levelParams)\n        default:\n            return INITIAL_STATE;\n    }\n}\n\nfunction createNewGameState(levelParams: LevelParams) {\n    return {\n        ...INITIAL_STATE,\n        magicWandCounter: levelParams.magicWandAmount,\n        level: levelParams,\n        grid: {\n            cells: generateDefaultGrid(levelParams)\n        }\n    };\n}\n\nfunction rerenderGridOnDragNDroppedFlag(cells: Array<Array<CellProps>>, cellToAddFlag?: CellPosition, cellToRemoveFlag?: CellPosition): Array<Array<CellProps>> {\n    if (cellToRemoveFlag) {\n        handleOnDragNDroppedRemoveFlag(cells, cellToRemoveFlag);\n    }\n    if (cellToAddFlag) {\n        handleOnDragNDroppedFlag(cells, cellToAddFlag);\n    }\n    return cells;\n}\n\nfunction isGameInProcess(state: GameState) {\n    return state.isGridCalculated && !state.isGameFailed && !state.isGameWon;\n}\n\nfunction isGameWon(cells: CellProps[][]) {\n    return isAllCellsOpened(cells);\n}\n\nfunction openAllBombsGrid(grid: Grid) {\n    openAllBombs(grid)\n    return grid;\n}\n\nfunction rerenderGridOnClick(state: GameState, cellPosition: CellPosition): CellProps[][] {\n    let gridCells = state.grid.cells;\n\n    if (state.isFlagSelected) {\n        addFlag(gridCells, cellPosition);\n    } else if (state.isFlagCrossedSelected) {\n        removeFlag(gridCells, cellPosition);\n    } else if (state.isQuestionSelected) {\n        addQuestion(gridCells, cellPosition);\n    } else if (state.isRemoveQuestionSelected) {\n        removeQuestion(gridCells, cellPosition);\n    } else if (state.isMagicWandSelected) {\n        const isUsed = openCellSafely(gridCells, cellPosition);\n        if (isUsed) {\n            state.magicWandCounter--;\n        }\n    } else {\n        if (!state.isGridCalculated) {\n            gridCells = moveBombsFromClickedCellAndCalculateGrid(gridCells, cellPosition);\n            state.isGridCalculated = true;\n        }\n        handleOnClick(gridCells, cellPosition);\n    }\n    return gridCells;\n}\n\nfunction rerenderGridOnRightClick(cells: CellProps[][], cellPosition: CellPosition): CellProps[][] {\n    handleOnRightClick(cells, cellPosition);\n    return cells;\n}\n","import {combineReducers} from \"redux\";\nimport {gameReducer, GameState} from \"./game/game.reducer\";\n\nexport interface AppState {\n    gameState: GameState\n}\n\nexport const reducers = combineReducers<AppState>({\n    gameState: gameReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducers} from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport {DndProvider} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport {TouchBackend} from 'react-dnd-touch-backend'\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(reducers, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <DndProvider backend={isMobileDevice() ? TouchBackend : HTML5Backend}>\n                <App/>\n            </DndProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}