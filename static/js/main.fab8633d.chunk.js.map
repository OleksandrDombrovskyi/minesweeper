{"version":3,"sources":["actions/actions.tsx","components/button/button.component.tsx","components/symbol-button-content/symbol-button-content.component.tsx","utils/detectmobilebrowser.js","components/flag/flag.component.tsx","components/cell/cell.component.tsx","reducers/game/game.selector.tsx","utils/gridUtils.tsx","utils/gridGeneratorUtils.tsx","components/counter/counter.component.tsx","utils/timerUtils.tsx","components/timer/timer.component.tsx","components/flags/flags.component.tsx","reducers/game/game.reducer.tsx","components/header/header.component.tsx","components/grid/grid.component.tsx","components/body/body.component.tsx","components/bottom-panel/bottom-panel.component.tsx","App.tsx","serviceWorker.ts","reducers/rootReducer.tsx","index.tsx"],"names":["ActionTypes","Button","props","className","width","height","getClassName","children","isPressed","isFailed","isOver","SymbolButtonContent","symbol","fontSize","getClass","style","isMobileDevice","some","toMatchItem","navigator","userAgent","match","DnDTypes","FlagImage","cellPosition","dispatch","useDispatch","useDrag","item","type","position","end","monitor","isFLagDroppedOutOfTable","getDropResult","dragNDropFlag","payload","cellToRemoveFlag","removeFlagFromCell","collect","isDragging","drag","preview","DragPreviewImage","connect","src","ref","opacity","alt","CellState","MobilePreviewForTouchEvent","usePreview","display","itemType","zIndex","CellProps","number","state","this","INITIAL","onCellRightClick","event","preventDefault","cellRightClicked","onCellClick","cellClicked","ownProps","selectCellNumber","selectCellState","selectCellIsFailed","useEffect","cellClickFailed","useDrop","accept","drop","draggedFlag","destinationPosition","flagSourcePosition","flagPosition","x","y","isTheSameCell","OPEN","flagInitPosition","cellToAddFlag","removeFlagFromSourceCellAndAddToDestinationCell","handleDragNDropFlag","id","onClick","onContextMenu","getNumberContent","FLAGGED","getFlagContent","QUESTIONED","getButtonContent","selectGameState","gameState","selectGameGrid","createSelector","grid","selectIsGameFailed","isGameFailed","selectIsGameWon","isGameWon","selectIsGridGenerated","isGridCalculated","selectGameGridBombs","cells","selectClickedCell","cellsProps","cellProps","selectBombAmount","flat","filter","cell","length","selectFlagAmount","selectGameTime","gameTime","selectIsFlagSelected","isFlagSelected","selectIsCrossedFlagSelected","isFlagCrossedSelected","handleOnClick","clickedCell","openCell","isPositionOutOfBound","i","j","generateDefaultGrid","numberGrid","cellGrid","Array","row","push","convertNumbersIntoCellProps","booleanGrid","map","array","convertBooleanGridToNumber","slice","convertArrayIntoGrid","Math","floor","random","shuffle","arrayLength","bombAmount","booleanArray","generateBooleanArray","moveBombsFromClickedCellAndCalculateGrid","gridCells","gridWithEmptyClickedCell","newX","newY","randomInt","isNewPositionInClickedCellArea","isBombCell","moveBombsFromClickedCellArea","forEach","plusOneToEveryoneAroundBomb","min","max","Counter","useSelector","flagAmount","formatInDoubleDigit","timeValue","intervalId","Timer","setInterval","incrementTime","clearInterval","timeSeconds","hours","minutes","seconds","toString","formatTime","Flags","INITIAL_STATE","rerenderGridOnDragNDroppedFlag","removeFlagCell","handleOnDragNDroppedRemoveFlag","droppedCell","handleOnDragNDroppedFlag","isGameInProcess","every","isAllCellsOpened","openAllBombsGrid","cellArray","openAllBombs","rerenderGridOnClick","addFlag","removeFlag","rerenderGridOnRightClick","handleOnRightClick","Header","imageName","getSmileImageName","startGame","mapStateToProps","createStructuredSelector","gameWon","cellProp","key","Body","BottomPanel","isCrossedFlagSelected","selectCrossedFlag","selectFlag","App","Boolean","window","location","hostname","reducers","combineReducers","action","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","DndProvider","backend","TouchBackend","HTML5Backend","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fab8633d.chunk.js","sourcesContent":["import {GameState} from \"../reducers/game/game.reducer\";\nimport {CellPosition} from \"../components/cell/cell.component\";\n\nexport enum ActionTypes {\n    startGame,\n    cellClicked,\n    cellClickFailed,\n    gameWon,\n    cellRightClicked,\n    incrementTime,\n    dragNDropFlag,\n    selectFlag,\n    selectCrossedFlag,\n}\n\nexport interface StartGame {\n    type: ActionTypes.startGame,\n    payload: GameState\n}\n\nexport interface CellClicked {\n    type: ActionTypes.cellClicked,\n    payload: CellPosition\n}\n\nexport interface CellRightClicked {\n    type: ActionTypes.cellRightClicked,\n    payload: CellPosition\n}\n\nexport interface GameFailed {\n    type: ActionTypes.cellClickFailed,\n    payload: null\n}\n\nexport interface GameWon {\n    type: ActionTypes.gameWon,\n    payload: null\n}\n\nexport interface IncrementTime {\n    type: ActionTypes.incrementTime,\n    payload: null\n}\n\nexport interface DragNDropFlag {\n    type: ActionTypes.dragNDropFlag,\n    payload: {\n        cellToAddFlag?: CellPosition,\n        cellToRemoveFlag?: CellPosition\n    }\n}\n\nexport interface SelectFlagAction {\n    type: ActionTypes.selectFlag,\n    payload: null\n}\n\nexport interface SelectCrossedFlagAction {\n    type: ActionTypes.selectCrossedFlag,\n    payload: null\n}\n\nexport type Action = StartGame | CellClicked | GameFailed | GameWon | CellRightClicked | IncrementTime | DragNDropFlag | SelectFlagAction | SelectCrossedFlagAction;","import React, {FunctionComponent, PropsWithChildren} from \"react\";\nimport './button.style.css';\n\nexport interface ButtonProps {\n    isPressed: boolean;\n    isFailed?: boolean;\n    isOver?: boolean\n}\n\nexport const Button: FunctionComponent<ButtonProps> = (props: PropsWithChildren<ButtonProps>) => {\n\n    return (\n        <div className=\"img-overlay-svg\">\n            <svg width=\"33\" height=\"33\">\n                <rect className={getClassName(props)} width=\"30\" height=\"30\"/>\n            </svg>\n            {props.children}\n        </div>\n        )\n};\n\nfunction getClassName({isPressed, isFailed, isOver}: ButtonProps) {\n    let isPressedClassName = isPressed ? \"open\" : \"initial\";\n    let isFailedClassName = isFailed ? \"failedCell\" : \"\";\n    let isOverClassName = !isPressed && isOver ? \"over\" : \"\";\n\n    return isPressedClassName + \" \" + isFailedClassName + \" \" + isOverClassName;\n}\n","import React, {FunctionComponent} from \"react\";\nimport './symbol-button-content.style.css';\n\nexport interface NumberContentProps {\n    symbol: number | string;\n    fontSize: number;\n}\n\nexport const SymbolButtonContent: FunctionComponent<NumberContentProps> = ({symbol, fontSize}) => {\n\n    return (\n        <span className={getClass(symbol)} style={{fontSize: fontSize + \"pt\"}}>{symbol}</span>\n    )\n}\n\nfunction getClass(symbol: number | string) {\n    if (symbol === \"?\") {\n        return \"question\";\n    } else {\n        return \"number_\" + symbol;\n    }\n}\n","export function isMobileDevice() {\n    const toMatch = [\n        /Android/i,\n        /webOS/i,\n        /iPhone/i,\n        /iPad/i,\n        /iPod/i,\n        /BlackBerry/i,\n        /Windows Phone/i\n    ];\n\n    return toMatch.some((toMatchItem) => {\n        return navigator.userAgent.match(toMatchItem);\n    });\n}","import React from \"react\";\nimport './flag.style.css';\nimport {CellPosition} from \"../cell/cell.component\";\nimport {DragPreviewImage, DragSourceMonitor, useDrag} from \"react-dnd\";\nimport {SourceType} from \"dnd-core\";\nimport {useDispatch} from \"react-redux\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {Dispatch} from \"redux\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\n// @ts-ignore\nimport {usePreview} from 'react-dnd-preview';\n\nexport const DnDTypes = {\n    FLAG: 'flag'\n}\n\nexport interface FlagProps {\n    cellPosition?: CellPosition;\n}\n\nexport interface FlagDragObject {\n    type: SourceType,\n    position?: CellPosition\n}\n\nexport const FlagImage = (props: FlagProps) => {\n    const {cellPosition} = props\n    let dispatch = useDispatch();\n\n    const [{isDragging}, drag, preview] = useDrag<FlagDragObject, boolean, any>({\n        item: {\n            type: DnDTypes.FLAG,\n            position: props.cellPosition\n        },\n        end: (item, monitor: DragSourceMonitor) => {\n            let isFLagDroppedOutOfTable = !monitor.getDropResult();\n            if (cellPosition && isFLagDroppedOutOfTable) {\n                removeFlagFromCell(dispatch, cellPosition);\n            }\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    })\n\n    return (\n        <>\n            {\n                isMobileDevice()\n                    ? <MobilePreviewForTouchEvent/>\n                    : <DragPreviewImage connect={preview} src=\"flag_24x24.png\"/>\n            }\n            <img ref={drag} width=\"22\" height=\"22\" src=\"flag_24x24.png\"\n                 style={{opacity: cellPosition && isDragging ? 0.5 : 1}}\n                 alt=\"123\"/>\n        </>\n    )\n}\n\nfunction removeFlagFromCell(dispatch: Dispatch<Action>, cellPosition: CellPosition) {\n    dispatch({\n        type: ActionTypes.dragNDropFlag,\n        payload: {\n            cellToRemoveFlag: cellPosition\n        }\n    })\n}\n\nconst MobilePreviewForTouchEvent = () => {\n    const {display, itemType, item, style} = usePreview();\n    if (!display) {\n        return null;\n    }\n    if (itemType === DnDTypes.FLAG) {\n        return (\n            <img width=\"50\" height=\"50\" src=\"flag_big.png\" alt=\"123\" style={{...style, zIndex: 50}}/>\n        )\n    }\n    return null;\n};\n","import React, {Dispatch, MouseEvent, useEffect} from \"react\";\nimport './cell.style.css';\nimport {connect, useDispatch} from \"react-redux\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {selectCellIsFailed, selectCellNumber, selectCellState} from \"../../reducers/game/game.selector\";\nimport {Button} from \"../button/button.component\";\nimport {SymbolButtonContent} from \"../symbol-button-content/symbol-button-content.component\";\nimport {FlagImage, DnDTypes, FlagDragObject} from \"../flag/flag.component\";\nimport {useDrop} from \"react-dnd\";\n\nexport enum CellState {\n    INITIAL,\n    FLAGGED,\n    QUESTIONED,\n    OPEN,\n}\n\nexport interface CellPosition {\n    x: number;\n    y: number;\n}\n\nexport class CellProps {\n    position: CellPosition;\n    number: number;\n    state: CellState;\n    isFailed: boolean;\n\n    constructor(position: CellPosition, number: number) {\n        this.position = position;\n        this.number = number;\n        this.state = CellState.INITIAL;\n        this.isFailed = false;\n    }\n}\n\nconst GridCell = (props: CellProps) => {\n\n    const {position, number, state, isFailed} = props;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isFailed) {\n            dispatch({type: ActionTypes.cellClickFailed});\n        }\n    });\n\n    const [{isOver}, drop] = useDrop<FlagDragObject, any, any>({\n        accept: DnDTypes.FLAG,\n        drop: (item: FlagDragObject) => handleDragNDropFlag(item, position, state, dispatch),\n        collect: monitor => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    return (\n        <div id={props.position.x + \"_\" + props.position.y} className=\"gridCell\"\n             onClick={onCellClick(position, dispatch)}\n             onContextMenu={onCellRightClick(position, dispatch)}>\n            <div ref={drop}>\n                <Button isPressed={state === CellState.OPEN} isFailed={isFailed} isOver={isOver}>\n                    {\n                        getButtonContent(state, number, position)\n                    }\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nfunction onCellRightClick(position: CellPosition, dispatch: Dispatch<any>) {\n    return (event: MouseEvent) => {\n        // prevent opening contextual menu on right button click\n        event.preventDefault();\n        dispatch({type: ActionTypes.cellRightClicked, payload: position})\n    }\n}\n\nfunction onCellClick(position: CellPosition, dispatch: Dispatch<Action>) {\n    return () => {\n        dispatch({type: ActionTypes.cellClicked, payload: position})\n    };\n}\n\nfunction getButtonContent(state: CellState, number: number, position: CellPosition) {\n    switch (state) {\n        case CellState.INITIAL:\n            return null;\n        case CellState.OPEN:\n            if (number === -1) {\n                return getBombContent();\n            } else if (number > 0) {\n                return getNumberContent(number);\n            } else {\n                return null;\n            }\n        case CellState.FLAGGED:\n            return getFlagContent(position);\n        case CellState.QUESTIONED:\n            return getQuestionContent();\n    }\n}\n\nfunction getQuestionContent() {\n    return (\n        <SymbolButtonContent symbol={\"?\"} fontSize={18}/>\n    );\n}\n\nfunction getFlagContent(position: CellPosition) {\n    return (\n        <div className=\"flag\">\n            <FlagImage cellPosition={position}/>\n        </div>\n    );\n}\n\nfunction getBombContent() {\n    return (\n        <img className=\"bomb\" width=\"33\" height=\"33\" src=\"bomb.svg\" alt=\"123\"/>\n    );\n}\n\nfunction getNumberContent(number: number) {\n    return (\n        <SymbolButtonContent symbol={number} fontSize={18}/>\n    );\n}\n\nfunction handleDragNDropFlag(draggedFlag: FlagDragObject, destinationPosition: CellPosition, state: CellState, dispatch: Dispatch<any>) {\n    let flagSourcePosition = draggedFlag.position;\n    if (isTheSameCell(flagSourcePosition, destinationPosition) || state === CellState.OPEN) {\n        return;\n    }\n    removeFlagFromSourceCellAndAddToDestinationCell(dispatch, destinationPosition, flagSourcePosition);\n}\n\nfunction isTheSameCell(flagPosition: CellPosition | undefined, position: CellPosition) {\n    return flagPosition && ((flagPosition.x === position.x) && (flagPosition.y === position.y));\n}\n\nfunction removeFlagFromSourceCellAndAddToDestinationCell(dispatch: (value: any) => void, position: CellPosition, flagInitPosition: CellPosition | undefined) {\n    dispatch({\n        type: ActionTypes.dragNDropFlag,\n        payload: {\n            cellToAddFlag: position,\n            cellToRemoveFlag: flagInitPosition\n        }\n    })\n}\n\nconst mapStateToProps = (state: AppState, ownProps: CellProps): CellProps => ({\n    position: ownProps.position,\n    number: selectCellNumber(ownProps.position)(state),\n    state: selectCellState(ownProps.position)(state),\n    isFailed: selectCellIsFailed(ownProps.position)(state)\n})\n\nexport default connect(mapStateToProps)(GridCell)","import {createSelector} from 'reselect';\nimport {AppState} from \"../rootReducer\";\nimport {GameState, Grid} from \"./game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../../components/cell/cell.component\";\n\nconst selectGameState = (state: AppState): GameState => state.gameState;\n\nexport const selectGameGrid = createSelector<AppState, GameState, Grid>(\n    [selectGameState],\n    (gameState: GameState) => gameState.grid\n);\n\nexport const selectIsGameFailed = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameFailed\n)\n\nexport const selectIsGameWon = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameWon\n)\n\nexport const selectIsGridGenerated = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGridCalculated\n)\n\nexport const selectGameGridBombs = createSelector<AppState, Grid, CellProps[][]>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells\n)\n\nexport const selectClickedCell = (position: CellPosition) => createSelector<AppState, CellProps[][], CellProps>(\n    [selectGameGridBombs],\n    (cellsProps: CellProps[][]) => cellsProps[position.y][position.x]\n)\n\nexport const selectCellNumber = (position: CellPosition) => createSelector<AppState, CellProps, number>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.number\n)\n\nexport const selectCellState = (position: CellPosition) => createSelector<AppState, CellProps, CellState>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.state\n)\n\nexport const selectCellIsFailed = (position: CellPosition) => createSelector<AppState, CellProps, boolean>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.isFailed\n)\n\nexport const selectBombAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.number === -1).length\n)\n\nexport const selectFlagAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.state === CellState.FLAGGED).length\n)\n\nexport const selectGameTime = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.gameTime\n)\n\nexport const selectIsFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagSelected\n)\n\nexport const selectIsCrossedFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagCrossedSelected\n)","import {Grid} from \"../reducers/game/game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../components/cell/cell.component\";\n\nexport function handleOnClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED || clickedCell.state === CellState.QUESTIONED) {\n        return;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.isFailed = true;\n    }\n\n    openCell(cells, clickedCell.position)\n}\n\nexport function addFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state !== CellState.OPEN) {\n        clickedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function removeFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED) {\n        clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function handleOnRightClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n    switch (clickedCell.state) {\n        case CellState.INITIAL:\n            clickedCell.state = CellState.FLAGGED;\n            break;\n        case CellState.FLAGGED:\n            clickedCell.state = CellState.QUESTIONED;\n            break;\n        case CellState.QUESTIONED:\n            clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function handleOnDragNDroppedFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const droppedCell = cells[cellPosition.y][cellPosition.x];\n    if (droppedCell.state === CellState.INITIAL || droppedCell.state === CellState.QUESTIONED) {\n        droppedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function handleOnDragNDroppedRemoveFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const removeFlagCell = cells[cellPosition.y][cellPosition.x];\n    if (removeFlagCell.state !== CellState.OPEN) {\n        removeFlagCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openAllBombs(grid: Grid): void {\n    grid.cells.forEach(cellArray => cellArray.forEach(cell => {\n        if (cell.number === -1 && cell.state !== CellState.FLAGGED) {\n            cell.state = CellState.OPEN;\n        }\n    }));\n}\n\nexport function isAllCellsOpened(cells: Array<Array<CellProps>>) {\n    return cells.flat()\n        .filter(cell => cell.number !== -1)\n        .every(cell => cell.state === CellState.OPEN)\n}\n\nfunction openCell(cells: CellProps[][], cellPosition: CellPosition) {\n    if (isPositionOutOfBound(cells, cellPosition)) {\n        return;\n    }\n\n    const cell = cells[cellPosition.y][cellPosition.x];\n    if (cell.state === CellState.OPEN) {\n        return; // to avoid looping on neighbouring empty cells\n    }\n    cell.state = CellState.OPEN;\n\n    // open all cells around\n    if (cell.number === 0) {\n        for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n            for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n                if (i === cellPosition.x && j === cellPosition.y) {\n                    continue;\n                }\n\n                openCell(cells, {x: i, y: j})\n            }\n        }\n    }\n}\n\nexport function isPositionOutOfBound(grid: Array<Array<CellProps>>, cellPosition: CellPosition) {\n    return cellPosition.x < 0 || cellPosition.y < 0\n        || cellPosition.x >= grid.length || cellPosition.y >= grid[0].length;\n}\n","import {CellPosition, CellProps} from \"../components/cell/cell.component\";\nimport {isPositionOutOfBound} from \"./gridUtils\";\n\nexport function generateDefaultGrid(width: number, height: number): Array<Array<CellProps>> {\n    let booleanArray = generateBooleanArray(width, height);\n    let shuffledBooleanArray = shuffle(booleanArray);\n    let booleanGrid = convertArrayIntoGrid(shuffledBooleanArray, width, height);\n    let numberGrid = convertBooleanGridToNumber(booleanGrid);\n    return convertNumbersIntoCellProps(numberGrid);\n}\n\nexport function moveBombsFromClickedCellAndCalculateGrid(gridCells: Array<Array<CellProps>>, position: CellPosition): Array<Array<CellProps>> {\n    let gridWithEmptyClickedCell = moveBombsFromClickedCellArea(position, gridCells)\n    return calculateCellBombNumbers(gridWithEmptyClickedCell);\n}\n\nexport function moveBombsFromClickedCellArea(position: CellPosition, grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    for (let i = position.x - 1; i <= position.x + 1; i++) {\n        for (let j = position.y - 1; j <= position.y + 1; j++) {\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number === -1) {\n                let newX;\n                let newY;\n                do {\n                    newX = randomInt(0, grid[0].length - 1);\n                    newY = randomInt(0, grid.length - 1);\n                } while(isNewPositionInClickedCellArea(newX, newY, position) || isBombCell(newX, newY, grid))\n                cell.number = 0;\n                grid[newY][newX].number = -1;\n            }\n        }\n    }\n    return grid;\n}\n\nfunction isBombCell(x: number, y: number, grid: Array<Array<CellProps>>) {\n    return grid[y][x].number === -1;\n}\n\nfunction isNewPositionInClickedCellArea(newX: number, newY: number, position: CellPosition) {\n    return (newX >= position.x - 1 && newX <= position.x + 1) && (newY >= position.y - 1 && newY <= position.y + 1);\n}\n\nfunction randomInt(min: number, max: number): number {\n    return min + Math.floor((max - min) * Math.random());\n}\n\nexport function generateBooleanArray(width: number, height: number): Array<boolean> {\n    const arrayLength = width * height;\n    const bombAmount = Math.floor(arrayLength / 4);\n    const booleanArray = new Array<boolean>();\n\n    for (let i = 0; i < arrayLength; i++) {\n        if (i < bombAmount) {\n            booleanArray.push(true);\n        } else {\n            booleanArray.push(false);\n        }\n    }\n\n    return booleanArray;\n}\n\nfunction shuffle(array: Array<boolean>): Array<boolean> {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport function convertArrayIntoGrid<T>(array: Array<T>, width: number, height: number): Array<Array<T>> {\n    const grid = new Array<Array<T>>();\n\n    for (let i = 0; i < height; i++) {\n        grid.push(array.slice(width * i, width * (i + 1)));\n    }\n\n    return grid;\n}\n\nexport function convertBooleanGridToNumber(booleanGrid: Array<Array<boolean>>): Array<Array<number>> {\n    return booleanGrid.map((array: Array<boolean>) => array.map((cell: boolean) => cell ? -1 : 0));\n}\n\nexport function convertNumbersIntoCellProps(numberGrid: Array<Array<number>>): Array<Array<CellProps>> {\n    const cellGrid = new Array<Array<CellProps>>();\n\n    for (let i = 0; i < numberGrid.length; i++) {\n        let row = new Array<CellProps>();\n        for (let j = 0; j < numberGrid[0].length; j++) {\n            row.push(new CellProps({x: j, y: i}, numberGrid[i][j]))\n        }\n        cellGrid.push(row);\n    }\n\n    return cellGrid;\n}\n\nexport function calculateCellBombNumbers(grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    grid.forEach((array: Array<CellProps>) => array.forEach((cell: CellProps) => {\n        if (cell.number === -1) {\n            plusOneToEveryoneAroundBomb(cell.position, grid)\n        }\n    }))\n\n    return grid;\n}\n\nexport function plusOneToEveryoneAroundBomb(cellPosition: CellPosition, grid: Array<Array<CellProps>>) {\n    for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n        for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n            if (i === cellPosition.x && j === cellPosition.y) {\n                continue;\n            }\n\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number !== -1) {\n                cell.number += 1;\n            }\n        }\n    }\n}\n\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectBombAmount, selectFlagAmount} from \"../../reducers/game/game.selector\";\nimport './counter.style.css';\n\nexport const Counter = () => {\n\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    return (\n        <div>\n            <div className=\"bomb_amount_container\"><span className=\"bomb_amount\">{bombAmount - flagAmount}</span></div>\n            <div className=\"image_container\"><img className=\"bomb_image\" src=\"bomb.svg\" alt=\"123\"/></div>\n        </div>\n    )\n}","export function formatTime(timeSeconds: number): string {\n    const hours = Math.floor(timeSeconds / 3600);\n    const minutes = Math.floor((timeSeconds % 3600) / 60);\n    const seconds = (timeSeconds % 3600) % 60;\n    return formatInDoubleDigit(hours.toString()) + \":\" + formatInDoubleDigit(minutes.toString()) + \":\" + formatInDoubleDigit(seconds.toString());\n}\n\nfunction formatInDoubleDigit(timeValue: string) {\n    if (timeValue.length === 0) {\n        return \"00\";\n    } else if(timeValue.length === 1) {\n        return \"0\" + timeValue;\n    } else {\n        return timeValue;\n    }\n}\n","import React, {useEffect} from \"react\";\nimport {formatTime} from \"../../utils/timerUtils\";\nimport './timer.style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectGameTime} from \"../../reducers/game/game.selector\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nlet intervalId: NodeJS.Timeout;\n\nexport const Timer = () => {\n    const gameTime = useSelector(selectGameTime);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        intervalId = setInterval(\n            () => dispatch({type: ActionTypes.incrementTime}),\n            1000\n        );\n\n        return () => {\n            clearInterval(intervalId);\n        }\n    })\n\n    return (\n        <div>\n            <span className=\"timer_span\">{formatTime(gameTime)}</span>\n        </div>\n    );\n}","import React from \"react\";\nimport './flags.style.css';\nimport {FlagImage} from \"../flag/flag.component\";\n\nexport const Flags = () => {\n\n    return (\n        <div id=\"drag_n_drop_flags_container_id\" className=\"drag_n_drop_flags_container\">\n            <div className=\"drag_n_drop_flag_1\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_2\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_3\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_4\">\n                <FlagImage/>\n            </div>\n        </div>\n    )\n}","import {Action, ActionTypes} from \"../../actions/actions\";\nimport {CellPosition, CellProps} from \"../../components/cell/cell.component\";\nimport {\n    addFlag,\n    handleOnClick,\n    handleOnDragNDroppedFlag,\n    handleOnDragNDroppedRemoveFlag,\n    handleOnRightClick,\n    isAllCellsOpened,\n    openAllBombs, removeFlag\n} from \"../../utils/gridUtils\";\nimport {generateDefaultGrid, moveBombsFromClickedCellAndCalculateGrid} from \"../../utils/gridGeneratorUtils\";\n\nexport interface Grid {\n    cells: Array<Array<CellProps>>\n}\n\nexport interface GameState {\n    isGameWon: boolean;\n    isGameFailed: boolean\n    isGridCalculated: boolean;\n    gameTime: number;\n    isFlagSelected: boolean;\n    isFlagCrossedSelected: boolean;\n    grid: Grid\n}\n\nexport const INITIAL_STATE: GameState = {\n    isGameWon: false,\n    isGameFailed: false,\n    isGridCalculated: false,\n    gameTime: 0,\n    isFlagSelected: false,\n    isFlagCrossedSelected: false,\n    grid: {\n        cells: generateDefaultGrid(10, 10)\n    }\n}\n\nexport const gameReducer = (state: GameState = INITIAL_STATE, action: Action): GameState => {\n    switch (action.type) {\n        case ActionTypes.startGame:\n            return action.payload;\n        case ActionTypes.cellClicked:\n            let cells = rerenderGridOnClick(state, action.payload);\n            return {\n                ...state,\n                grid: {\n                    cells: cells\n                },\n                isGameWon: isGameWon(cells),\n                isFlagSelected: false,\n                isFlagCrossedSelected: false\n            }\n        case ActionTypes.cellClickFailed:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n                isGameFailed: true,\n            }\n        case ActionTypes.cellRightClicked:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnRightClick(state.grid.cells, action.payload),\n                }\n            }\n        case ActionTypes.gameWon:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n            }\n        case ActionTypes.incrementTime:\n            return {\n                ...state,\n                gameTime: isGameInProcess(state) ? state.gameTime + 1 : state.gameTime,\n            }\n        case ActionTypes.dragNDropFlag:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnDragNDroppedFlag(state.grid.cells, action.payload.cellToAddFlag, action.payload.cellToRemoveFlag),\n                }\n            }\n        case ActionTypes.selectFlag:\n            return {\n                ...state,\n                isFlagCrossedSelected: false,\n                isFlagSelected: !state.isFlagSelected\n            }\n        case ActionTypes.selectCrossedFlag:\n            return {\n                ...state,\n                isFlagSelected: false,\n                isFlagCrossedSelected: !state.isFlagCrossedSelected\n            }\n        default:\n            return INITIAL_STATE;\n    }\n}\n\nfunction rerenderGridOnDragNDroppedFlag(cells: Array<Array<CellProps>>, cellToAddFlag?: CellPosition, cellToRemoveFlag?: CellPosition): Array<Array<CellProps>> {\n    if (cellToRemoveFlag) {\n        handleOnDragNDroppedRemoveFlag(cells, cellToRemoveFlag);\n    }\n    if (cellToAddFlag) {\n        handleOnDragNDroppedFlag(cells, cellToAddFlag);\n    }\n    return cells;\n}\n\nfunction isGameInProcess(state: GameState) {\n    return state.isGridCalculated && !state.isGameFailed && !state.isGameWon;\n}\n\nfunction isGameWon(cells: CellProps[][]) {\n    return isAllCellsOpened(cells);\n}\n\nfunction openAllBombsGrid(grid: Grid) {\n    openAllBombs(grid)\n    return grid;\n}\n\nfunction rerenderGridOnClick(state: GameState, cellPosition: CellPosition): CellProps[][] {\n    let gridCells = state.grid.cells;\n\n    if (state.isFlagSelected) {\n        addFlag(gridCells, cellPosition)\n    } else if (state.isFlagCrossedSelected) {\n        removeFlag(gridCells, cellPosition)\n    } else {\n        if (!state.isGridCalculated) {\n            gridCells = moveBombsFromClickedCellAndCalculateGrid(gridCells, cellPosition);\n            state.isGridCalculated = true;\n        }\n        handleOnClick(gridCells, cellPosition);\n    }\n    return gridCells;\n}\n\nfunction rerenderGridOnRightClick(cells: CellProps[][], cellPosition: CellPosition): CellProps[][] {\n    handleOnRightClick(cells, cellPosition);\n    return cells;\n}\n","import React, {Dispatch} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectBombAmount,\n    selectFlagAmount,\n    selectIsGameFailed,\n    selectIsGameWon\n} from \"../../reducers/game/game.selector\";\nimport \"./header.style.css\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {generateDefaultGrid} from \"../../utils/gridGeneratorUtils\";\nimport {Counter} from \"../counter/counter.component\";\nimport {Timer} from \"../timer/timer.component\";\nimport {Flags} from \"../flags/flags.component\";\nimport {INITIAL_STATE} from \"../../reducers/game/game.reducer\";\n\nexport const Header = () => {\n    const isGameWon = useSelector(selectIsGameWon)\n    const isGameFailed = useSelector(selectIsGameFailed)\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    const dispatch = useDispatch();\n\n    let imageName = getSmileImageName(isGameFailed, isGameWon, bombAmount, flagAmount);\n\n    return (\n        <div className=\"header\">\n            <div className=\"flags_and_counter_container\">\n                <div className=\"flags\">\n                    <Flags/>\n                </div>\n                <div className=\"counter\">\n                    <Counter/>\n                </div>\n            </div>\n            <div className=\"smile\">\n                <img className=\"smile_image\" src={\"smiles/\" + imageName} alt=\"fail\" onClick={startGame(dispatch)}/>\n            </div>\n            <div className=\"timer\">\n                <Timer/>\n            </div>\n        </div>\n    )\n}\n\nfunction startGame(dispatch: Dispatch<Action>) {\n    return () => dispatch({\n        type: ActionTypes.startGame,\n        payload: {\n            ...INITIAL_STATE,\n            grid: {\n                cells: generateDefaultGrid(10, 10)\n            }\n        }\n    })\n}\n\nfunction getSmileImageName(isGameFailed: boolean, isGameWon: boolean, bombAmount: number, flagAmount: number) {\n    if (isGameFailed) {\n        return \"failed.png\";\n    } else if (isGameWon) {\n        return \"win.png\";\n    } else if (bombAmount < flagAmount) {\n        return \"laugh.png\";\n    } else {\n        return \"start.png\";\n    }\n}\n","import React, {useEffect} from \"react\";\nimport GridCell, {CellProps} from \"../cell/cell.component\";\nimport './grid.style.css';\nimport {GameState} from \"../../reducers/game/game.reducer\";\nimport {createStructuredSelector} from \"reselect\";\nimport {\n    selectGameGrid,\n    selectGameTime,\n    selectIsCrossedFlagSelected,\n    selectIsFlagSelected,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectIsGridGenerated\n} from \"../../reducers/game/game.selector\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nconst GridComponent = (props: GameState) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (props.isGameWon) {\n            dispatch({type: ActionTypes.gameWon})\n        }\n    })\n\n    return (\n        <div className={\"grid\" + (props.isGameFailed || props.isGameWon ? \" disabled\" : \"\")}>\n            {\n                props.grid.cells.map((cellProps: Array<CellProps>) =>\n                    cellProps.map(cellProp => <GridCell\n                        key={cellProp.position.x + \"x\" + cellProp.position.y} {...cellProp}/>))\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, GameState>({\n    grid: selectGameGrid,\n    isGameFailed: selectIsGameFailed,\n    isGameWon: selectIsGameWon,\n    isGridCalculated: selectIsGridGenerated,\n    gameTime: selectGameTime,\n    isFlagSelected: selectIsFlagSelected,\n    isFlagCrossedSelected: selectIsCrossedFlagSelected\n})\n\nexport default connect(mapStateToProps)(GridComponent)","import React from \"react\";\nimport './body.style.css';\nimport GridComponent from \"../grid/grid.component\";\n\nexport const Body = () => {\n    return (\n        <div className=\"body_container\">\n            <div className=\"body\">\n                <GridComponent/>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {ActionTypes} from \"../../actions/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectIsCrossedFlagSelected, selectIsFlagSelected} from \"../../reducers/game/game.selector\";\nimport './bottom-panel.style.css';\n\nexport const BottomPanel = () => {\n\n    const dispatch = useDispatch();\n    let isFlagSelected = useSelector(selectIsFlagSelected);\n    let isCrossedFlagSelected = useSelector(selectIsCrossedFlagSelected);\n\n    return (\n        <div className=\"bottom_panel\">\n            <div className=\"remove_flag\"\n                 onClick={() => dispatch({type: ActionTypes.selectCrossedFlag})}\n                 style={isCrossedFlagSelected ? {opacity: 1} : {opacity: 0.3}}>\n                <img className=\"drag_crossed_mobile\" src=\"flag_big.png\" alt=\"123\"/>\n            </div>\n            <div className=\"add_flag\"\n                 onClick={() => dispatch({type: ActionTypes.selectFlag})}\n                 style={isFlagSelected ? {opacity: 1} : {opacity: 0.3}}>\n                <img className=\"drag_mobile\" src=\"flag_big.png\" alt=\"123\"/>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/header/header.component\";\nimport {Body} from \"./components/body/body.component\";\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\nimport {BottomPanel} from \"./components/bottom-panel/bottom-panel.component\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Body/>\n            {\n                isMobileDevice() && <BottomPanel/>\n            }\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {gameReducer, GameState} from \"./game/game.reducer\";\n\nexport interface AppState {\n    gameState: GameState\n}\n\nexport const reducers = combineReducers<AppState>({\n    gameState: gameReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducers} from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport {DndProvider} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport {TouchBackend} from 'react-dnd-touch-backend'\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(reducers, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <DndProvider backend={isMobileDevice() ? TouchBackend : HTML5Backend}>\n                <App/>\n            </DndProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}