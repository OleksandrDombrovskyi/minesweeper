{"version":3,"sources":["utils/detectmobilebrowser.js","actions/actions.tsx","components/flag/flag.component.tsx","components/flags/flags.component.tsx","components/button/button.component.tsx","components/symbol-button-content/symbol-button-content.component.tsx","components/cell/cell.component.tsx","reducers/game/game.selector.tsx","components/counter/counter.component.tsx","utils/timerUtils.tsx","components/timer/timer.component.tsx","components/central-navbar/central-navbar.component.tsx","components/header/header.component.tsx","components/grid/grid.component.tsx","components/body/body.component.tsx","components/bottom-panel/bottom-panel.component.tsx","components/menu-drawer/menu.component.tsx","components/level-dialog/level-dialog.component.tsx","App.tsx","serviceWorker.ts","utils/gridUtils.tsx","utils/gridGeneratorUtils.tsx","reducers/game/data.tsx","reducers/game/game.reducer.tsx","reducers/rootReducer.tsx","index.tsx"],"names":["isMobileDevice","some","toMatchItem","navigator","userAgent","match","startGame","createAction","cellClicked","cellRightClicked","cellClickFailed","gameWon","incrementTime","dragNDropFlag","selectFlag","selectCrossedFlag","selectQuestion","selectCrossedQuestion","selectMagicWand","openMenuAction","closeMenuAction","openLevelDialog","closeLevelDialog","changeLevel","DnDTypes","FlagImage","props","cellPosition","dispatch","useDispatch","useDrag","item","type","position","end","monitor","isFLagDroppedOutOfTable","getDropResult","cellToRemoveFlag","removeFlagFromCell","collect","isDragging","drag","preview","DragPreviewImage","connect","src","ref","width","height","style","opacity","alt","MobilePreviewForTouchEvent","usePreview","display","itemType","zIndex","top","left","Flags","id","className","Button","children","getClassName","isPressed","isFailed","isOver","SymbolButtonContent","symbol","fontSize","getClass","CellState","CellProps","number","state","this","INITIAL","onCellRightClick","event","preventDefault","onCellClick","ownProps","selectCellNumber","selectCellState","selectCellIsFailed","useEffect","useDrop","accept","drop","draggedFlag","destinationPosition","flagSourcePosition","flagPosition","x","y","isTheSameCell","OPEN","flagInitPosition","cellToAddFlag","removeFlagFromSourceCellAndAddToDestinationCell","handleDragNDropFlag","onClick","onContextMenu","getNumberContent","FLAGGED","getFlagContent","QUESTIONED","getButtonContent","selectGameState","gameState","selectGameGrid","createSelector","grid","selectIsGameFailed","isGameFailed","selectIsGameWon","isGameWon","selectIsGridGenerated","isGridCalculated","selectGameGridBombs","cells","selectClickedCell","cellsProps","cellProps","selectBombAmount","flat","filter","cell","length","selectFlagAmount","selectGameTime","gameTime","selectIsFlagSelected","isFlagSelected","selectIsCrossedFlagSelected","isFlagCrossedSelected","selectIsQuestionSelected","isQuestionSelected","selectIsRemoveQuestionSelected","isRemoveQuestionSelected","selectIsMagicWandSelected","isMagicWandSelected","selectIsMenuOpened","isMenuOpened","selectMagicWandCounter","magicWandCounter","selectIsLevelDialogOpened","isLevelDialogOpened","selectLevelParams","level","Counter","bombAmount","useSelector","flagAmount","formatInDoubleDigit","timeValue","intervalId","Timer","setInterval","clearInterval","timeSeconds","hours","Math","floor","minutes","seconds","toString","formatTime","CentralNavbar","levelParams","imageName","getSmileImageName","paddingTop","color","dispatchStartGame","Header","paddingLeft","cursor","mapStateToProps","createStructuredSelector","numberOfColumns","numberOfRows","gridTemplateColumns","gridTemplateRows","map","cellProp","key","Body","marginBottom","BottomPanel","isCrossedFlagSelected","isIsMagicWandSelected","disableIdCounterZero","pointerEvents","DrawerMenu","open","onChange","isOpened","overlayColor","Toolbar","Typography","variant","marginLeft","MenuItem","ListItemIcon","ListItemText","primary","LevelDialog","useState","scaleValue","setScale","complexityValue","setComplexity","Dialog","onClose","aria-labelledby","fullWidth","DialogTitle","DialogContent","FormControl","component","FormLabel","RadioGroup","aria-label","name","value","target","FormControlLabel","control","Radio","label","DialogActions","scale","complexity","App","Boolean","window","location","hostname","openCell","isPositionOutOfBound","i","j","generateDefaultGrid","numberGrid","cellGrid","Array","row","push","convertNumbersIntoCellProps","booleanGrid","array","convertBooleanGridToNumber","slice","convertArrayIntoGrid","random","shuffle","arrayLength","booleanArray","generateBooleanArray","moveBombsFromClickedCellAndCalculateGrid","gridCells","gridWithEmptyClickedCell","newX","newY","randomInt","isNewPositionInClickedCellArea","isBombCell","moveBombsFromClickedCellArea","forEach","plusOneToEveryoneAroundBomb","min","max","levelsTable","Map","magicWandAmount","INITIAL_LEVEL_PARAMS","get","INITIAL_STATE","createNewGameState","rerenderGridOnDragNDroppedFlag","removeFlagCell","handleOnDragNDroppedRemoveFlag","droppedCell","handleOnDragNDroppedFlag","isGameInProcess","every","isAllCellsOpened","openAllBombsGrid","cellArray","openAllBombs","rerenderGridOnClick","clickedCell","addFlag","removeFlag","addQuestion","removeQuestion","openCellSafely","handleOnClick","rerenderGridOnRightClick","handleOnRightClick","reducers","combineReducers","action","getType","actions","payload","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","DndProvider","backend","TouchBackend","HTML5Backend","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c81ec3ed.chunk.js","sourcesContent":["export function isMobileDevice() {\n    const toMatch = [\n        /Android/i,\n        /webOS/i,\n        /iPhone/i,\n        /iPad/i,\n        /iPod/i,\n        /BlackBerry/i,\n        /Windows Phone/i\n    ];\n\n    return toMatch.some((toMatchItem) => {\n        return navigator.userAgent.match(toMatchItem);\n    });\n}","import {CellPosition} from \"../components/cell/cell.component\";\nimport {GameLevel} from \"../components/level-dialog/level-dialog.component\";\nimport {LevelParams} from \"../reducers/game/data\";\nimport {createAction} from \"typesafe-actions\";\n\nexport const startGame = createAction('startGame')<LevelParams>();\n\nexport const cellClicked = createAction('cellClicked')<CellPosition>();\n\nexport const cellRightClicked = createAction('cellRightClicked')<CellPosition>();\n\nexport const cellClickFailed = createAction('cellClickFailed')<void>();\n\nexport const gameWon = createAction('gameWon')<void>();\n\nexport const incrementTime = createAction('incrementTime')<void>();\n\nexport const dragNDropFlag = createAction('dragNDropFlag')<MoveFlagProps>();\n\nexport const selectFlag = createAction('selectFlag')<void>();\n\nexport const selectCrossedFlag = createAction('selectCrossedFlag')<void>();\n\nexport const selectQuestion = createAction('selectQuestion')<void>();\n\nexport const selectCrossedQuestion = createAction('selectCrossedQuestion')<void>();\n\nexport const selectMagicWand = createAction('selectMagicWand')<void>();\n\nexport const openMenuAction = createAction('openMenuAction')<void>();\n\nexport const closeMenuAction = createAction('closeMenuAction')<void>();\n\nexport const openLevelDialog = createAction('openLevelDialog')<void>();\n\nexport const closeLevelDialog = createAction('closeLevelDialog')<void>();\n\nexport const changeLevel = createAction('changeLevel')<GameLevel>();\n\nexport interface MoveFlagProps {\n    cellToAddFlag?: CellPosition,\n    cellToRemoveFlag?: CellPosition\n}","import React from \"react\";\nimport './flag.style.css';\nimport {CellPosition} from \"../cell/cell.component\";\nimport {DragPreviewImage, DragSourceMonitor, useDrag} from \"react-dnd\";\nimport {SourceType} from \"dnd-core\";\nimport {useDispatch} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\n// @ts-ignore\nimport {usePreview} from 'react-dnd-preview';\nimport {dragNDropFlag} from \"../../actions/actions\";\n\nexport const DnDTypes = {\n    FLAG: 'flag'\n}\n\nexport interface FlagProps {\n    cellPosition?: CellPosition;\n}\n\nexport interface FlagDragObject {\n    type: SourceType,\n    position?: CellPosition\n}\n\nexport const FlagImage = (props: FlagProps) => {\n    const {cellPosition} = props\n    let dispatch = useDispatch();\n\n    const [{isDragging}, drag, preview] = useDrag<FlagDragObject, boolean, any>({\n        item: {\n            type: DnDTypes.FLAG,\n            position: props.cellPosition\n        },\n        end: (item, monitor: DragSourceMonitor) => {\n            let isFLagDroppedOutOfTable = !monitor.getDropResult();\n            if (cellPosition && isFLagDroppedOutOfTable) {\n                removeFlagFromCell(dispatch, cellPosition);\n            }\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    })\n\n    return (\n        <>\n            {\n                isMobileDevice()\n                    ? <MobilePreviewForTouchEvent/>\n                    : <DragPreviewImage connect={preview} src=\"flag_24x24.png\"/>\n            }\n            <img ref={drag} width=\"22\" height=\"22\" src=\"flag_24x24.png\"\n                 style={{opacity: cellPosition && isDragging ? 0.5 : 1}}\n                 alt=\"123\"/>\n        </>\n    )\n}\n\nfunction removeFlagFromCell(dispatch: Dispatch<any>, cellPosition: CellPosition) {\n    dispatch(dragNDropFlag({cellToRemoveFlag: cellPosition}))\n}\n\nconst MobilePreviewForTouchEvent = () => {\n    const {display, itemType, item, style} = usePreview();\n    if (!display) {\n        return null;\n    }\n    if (itemType === DnDTypes.FLAG) {\n        return (\n            <img width=\"50\" height=\"50\" src=\"flag_big.png\" alt=\"123\"\n                 style={{...style, zIndex: 50, top: -10, left: -10}}/>\n        )\n    }\n    return null;\n};\n","import React from \"react\";\nimport './flags.style.css';\nimport {FlagImage} from \"../flag/flag.component\";\n\nexport const Flags = () => {\n\n    return (\n        <div id=\"drag_n_drop_flags_container_id\" className=\"drag_n_drop_flags_container\">\n            <div className=\"drag_n_drop_flag_1\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_2\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_3\">\n                <FlagImage/>\n            </div>\n            <div className=\"drag_n_drop_flag_4\">\n                <FlagImage/>\n            </div>\n        </div>\n    )\n}","import React, {FunctionComponent, PropsWithChildren} from \"react\";\nimport './button.style.css';\n\nexport interface ButtonProps {\n    isPressed: boolean;\n    isFailed?: boolean;\n    isOver?: boolean;\n    width?: number;\n    height?: number;\n    stroke?: number;\n}\n\nexport const Button: FunctionComponent<ButtonProps> = (props: PropsWithChildren<ButtonProps>) => {\n    const {\n        width = 30,\n        height = 30,\n        children\n    } = props;\n\n    return (\n        <div className=\"button_container\" style={{width, height}}>\n            <div className={getClassName(props) + \" content\"} style={{width, height}}>\n                {children}\n            </div>\n        </div>\n    )\n};\n\nfunction getClassName({isPressed, isFailed, isOver}: ButtonProps) {\n    let isPressedClassName = isPressed ? \"open\" : \"initial\";\n    let isFailedClassName = isFailed ? \"failedCell\" : \"\";\n    let isOverClassName = !isPressed && isOver ? \"over\" : \"\";\n\n    return isPressedClassName + \" \" + isFailedClassName + \" \" + isOverClassName;\n}\n","import React, {FunctionComponent} from \"react\";\nimport './symbol-button-content.style.css';\n\nexport interface NumberContentProps {\n    symbol: number | string;\n    fontSize: number;\n}\n\nexport const SymbolButtonContent: FunctionComponent<NumberContentProps> = ({symbol, fontSize}) => {\n\n    return (\n        <span className={getClass(symbol)} style={{fontSize: fontSize + \"pt\"}}>{symbol}</span>\n    )\n}\n\nfunction getClass(symbol: number | string) {\n    if (symbol === \"?\") {\n        return \"question\";\n    } else {\n        return \"number_\" + symbol;\n    }\n}\n","import React, {Dispatch, MouseEvent, useEffect} from \"react\";\nimport './cell.style.css';\nimport {connect, useDispatch} from \"react-redux\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {selectCellIsFailed, selectCellNumber, selectCellState} from \"../../reducers/game/game.selector\";\nimport {Button} from \"../button/button.component\";\nimport {SymbolButtonContent} from \"../symbol-button-content/symbol-button-content.component\";\nimport {FlagImage, DnDTypes, FlagDragObject} from \"../flag/flag.component\";\nimport {useDrop} from \"react-dnd\";\nimport {cellClicked, cellClickFailed, cellRightClicked, dragNDropFlag} from \"../../actions/actions\";\n\nexport enum CellState {\n    INITIAL,\n    FLAGGED,\n    QUESTIONED,\n    OPEN,\n}\n\nexport interface CellPosition {\n    x: number;\n    y: number;\n}\n\nexport class CellProps {\n    position: CellPosition;\n    number: number;\n    state: CellState;\n    isFailed: boolean;\n\n    constructor(position: CellPosition, number: number) {\n        this.position = position;\n        this.number = number;\n        this.state = CellState.INITIAL;\n        this.isFailed = false;\n    }\n}\n\nconst GridCell = (props: CellProps) => {\n\n    const {position, number, state, isFailed} = props;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isFailed) {\n            dispatch(cellClickFailed());\n        }\n    });\n\n    const [{isOver}, drop] = useDrop<FlagDragObject, any, any>({\n        accept: DnDTypes.FLAG,\n        drop: (item: FlagDragObject) => handleDragNDropFlag(item, position, state, dispatch),\n        collect: monitor => ({\n            isOver: monitor.isOver()\n        })\n    });\n\n    return (\n        <div id={props.position.x + \"_\" + props.position.y} className=\"gridCell\"\n             onClick={onCellClick(position, dispatch)}\n             onContextMenu={onCellRightClick(position, dispatch)}>\n            <div ref={drop}>\n                <Button isPressed={state === CellState.OPEN} isFailed={isFailed} isOver={isOver}>\n                    {\n                        getButtonContent(state, number, position)\n                    }\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nfunction onCellRightClick(position: CellPosition, dispatch: Dispatch<any>) {\n    return (event: MouseEvent) => {\n        // prevent opening contextual menu on right button click\n        event.preventDefault();\n        dispatch(cellRightClicked(position))\n    }\n}\n\nfunction onCellClick(position: CellPosition, dispatch: Dispatch<any>) {\n    return () => {\n        dispatch(cellClicked(position))\n    };\n}\n\nfunction getButtonContent(state: CellState, number: number, position: CellPosition) {\n    switch (state) {\n        case CellState.INITIAL:\n            return null;\n        case CellState.OPEN:\n            if (number === -1) {\n                return getBombContent();\n            } else if (number > 0) {\n                return getNumberContent(number);\n            } else {\n                return null;\n            }\n        case CellState.FLAGGED:\n            return getFlagContent(position);\n        case CellState.QUESTIONED:\n            return getQuestionContent();\n    }\n}\n\nfunction getQuestionContent() {\n    return (\n        <SymbolButtonContent symbol={\"?\"} fontSize={18}/>\n    );\n}\n\nfunction getFlagContent(position: CellPosition) {\n    return (\n        <FlagImage cellPosition={position}/>\n    );\n}\n\nfunction getBombContent() {\n    return (\n        <img className=\"bomb\" width=\"33\" height=\"33\" src=\"bomb.svg\" alt=\"123\"/>\n    );\n}\n\nfunction getNumberContent(number: number) {\n    return (\n        <SymbolButtonContent symbol={number} fontSize={18}/>\n    );\n}\n\nfunction handleDragNDropFlag(draggedFlag: FlagDragObject, destinationPosition: CellPosition, state: CellState, dispatch: Dispatch<any>) {\n    let flagSourcePosition = draggedFlag.position;\n    if (isTheSameCell(flagSourcePosition, destinationPosition) || state === CellState.OPEN) {\n        return;\n    }\n    removeFlagFromSourceCellAndAddToDestinationCell(dispatch, destinationPosition, flagSourcePosition);\n}\n\nfunction isTheSameCell(flagPosition: CellPosition | undefined, position: CellPosition) {\n    return flagPosition && ((flagPosition.x === position.x) && (flagPosition.y === position.y));\n}\n\nfunction removeFlagFromSourceCellAndAddToDestinationCell(dispatch: (value: any) => void, position: CellPosition, flagInitPosition: CellPosition | undefined) {\n    dispatch(dragNDropFlag({\n        cellToAddFlag: position,\n        cellToRemoveFlag: flagInitPosition\n    }))\n}\n\nconst mapStateToProps = (state: AppState, ownProps: CellProps): CellProps => ({\n    position: ownProps.position,\n    number: selectCellNumber(ownProps.position)(state),\n    state: selectCellState(ownProps.position)(state),\n    isFailed: selectCellIsFailed(ownProps.position)(state)\n})\n\nexport default connect(mapStateToProps)(GridCell)","import {createSelector} from 'reselect';\nimport {AppState} from \"../rootReducer\";\nimport {GameState, Grid} from \"./game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../../components/cell/cell.component\";\nimport {LevelParams} from \"./data\";\n\nconst selectGameState = (state: AppState): GameState => state.gameState;\n\nexport const selectGameGrid = createSelector<AppState, GameState, Grid>(\n    [selectGameState],\n    (gameState: GameState) => gameState.grid\n);\n\nexport const selectIsGameFailed = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameFailed\n)\n\nexport const selectIsGameWon = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameWon\n)\n\nexport const selectIsGridGenerated = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGridCalculated\n)\n\nexport const selectGameGridBombs = createSelector<AppState, Grid, CellProps[][]>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells\n)\n\nexport const selectClickedCell = (position: CellPosition) => createSelector<AppState, CellProps[][], CellProps>(\n    [selectGameGridBombs],\n    (cellsProps: CellProps[][]) => cellsProps[position.y][position.x]\n)\n\nexport const selectCellNumber = (position: CellPosition) => createSelector<AppState, CellProps, number>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.number\n)\n\nexport const selectCellState = (position: CellPosition) => createSelector<AppState, CellProps, CellState>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.state\n)\n\nexport const selectCellIsFailed = (position: CellPosition) => createSelector<AppState, CellProps, boolean>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.isFailed\n)\n\nexport const selectBombAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.number === -1).length\n)\n\nexport const selectFlagAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.state === CellState.FLAGGED).length\n)\n\nexport const selectGameTime = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.gameTime\n)\n\nexport const selectIsFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagSelected\n)\n\nexport const selectIsCrossedFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagCrossedSelected\n)\n\nexport const selectIsQuestionSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isQuestionSelected\n)\n\nexport const selectIsRemoveQuestionSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isRemoveQuestionSelected\n)\n\nexport const selectIsMagicWandSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isMagicWandSelected\n)\n\nexport const selectIsMenuOpened = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isMenuOpened\n)\n\nexport const selectMagicWandCounter = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.magicWandCounter\n)\n\nexport const selectIsLevelDialogOpened = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isLevelDialogOpened\n)\n\nexport const selectLevelParams = createSelector<AppState, GameState, LevelParams>(\n    [selectGameState],\n    (gameState: GameState) => gameState.level\n)","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectBombAmount, selectFlagAmount} from \"../../reducers/game/game.selector\";\nimport './counter.style.css';\n\nexport const Counter = () => {\n\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    return (\n        <div>\n            <div className=\"bomb_amount_container\"><span className=\"bomb_amount\">{bombAmount - flagAmount}</span></div>\n            <div className=\"image_container\"><img className=\"bomb_image\" src=\"bomb.svg\" alt=\"123\"/></div>\n        </div>\n    )\n}","export function formatTime(timeSeconds: number): string {\n    const hours = Math.floor(timeSeconds / 3600);\n    const minutes = Math.floor((timeSeconds % 3600) / 60);\n    const seconds = (timeSeconds % 3600) % 60;\n    return formatInDoubleDigit(hours.toString()) + \":\" + formatInDoubleDigit(minutes.toString()) + \":\" + formatInDoubleDigit(seconds.toString());\n}\n\nfunction formatInDoubleDigit(timeValue: string) {\n    if (timeValue.length === 0) {\n        return \"00\";\n    } else if(timeValue.length === 1) {\n        return \"0\" + timeValue;\n    } else {\n        return timeValue;\n    }\n}\n","import React, {useEffect} from \"react\";\nimport {formatTime} from \"../../utils/timerUtils\";\nimport './timer.style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectGameTime} from \"../../reducers/game/game.selector\";\nimport {incrementTime} from \"../../actions/actions\";\n\nlet intervalId: NodeJS.Timeout;\n\nexport const Timer = () => {\n    const gameTime = useSelector(selectGameTime);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        intervalId = setInterval(\n            () => dispatch(incrementTime()),\n            1000\n        );\n\n        return () => {\n            clearInterval(intervalId);\n        }\n    })\n\n    return (\n        <div>\n            <span className=\"timer_span\">{formatTime(gameTime)}</span>\n        </div>\n    );\n}","import React from \"react\";\nimport './central-navbar.style.css';\nimport {Flags} from \"../flags/flags.component\";\nimport {Counter} from \"../counter/counter.component\";\nimport {Timer} from \"../timer/timer.component\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectBombAmount,\n    selectFlagAmount,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectLevelParams\n} from \"../../reducers/game/game.selector\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {LevelParams} from \"../../reducers/game/data\";\nimport {openMenuAction, startGame} from \"../../actions/actions\";\n\nexport const CentralNavbar = () => {\n\n    const dispatch = useDispatch();\n\n    const levelParams = useSelector(selectLevelParams);\n\n    const isGameWon = useSelector(selectIsGameWon)\n    const isGameFailed = useSelector(selectIsGameFailed)\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    let imageName = getSmileImageName(isGameFailed, isGameWon, bombAmount, flagAmount);\n\n    return (\n        <div className=\"central-navbar\">\n            <div className=\"flags\">\n                {\n                    isMobileDevice()\n                        ? <MenuIcon fontSize=\"large\" style={{paddingTop: 10}} color=\"action\"\n                                    onClick={() => dispatch(openMenuAction())}/>\n                        : <Flags/>\n                }\n            </div>\n            <div className=\"counter\">\n                <Counter/>\n            </div>\n            <div className=\"smile\">\n                <img className=\"smile_image\" src={\"smiles/\" + imageName} alt=\"fail\"\n                     onClick={dispatchStartGame(dispatch, levelParams)}/>\n            </div>\n            <div className=\"timer\">\n                <Timer/>\n            </div>\n        </div>\n    )\n}\n\nfunction getSmileImageName(isGameFailed: boolean, isGameWon: boolean, bombAmount: number, flagAmount: number) {\n    if (isGameFailed) {\n        return \"failed.png\";\n    } else if (isGameWon) {\n        return \"win.png\";\n    } else if (bombAmount < flagAmount) {\n        return \"laugh.png\";\n    } else {\n        return \"start.png\";\n    }\n}\n\nfunction dispatchStartGame(dispatch: React.Dispatch<any>, levelParams: LevelParams) {\n    return () => dispatch(startGame(levelParams))\n}","import React, {Dispatch} from \"react\";\nimport \"./header.style.css\";\nimport {CentralNavbar} from \"../central-navbar/central-navbar.component\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useDispatch} from \"react-redux\";\nimport {openMenuAction} from \"../../actions/actions\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"header\">\n            {\n                !isMobileDevice() &&\n                <div className=\"left_box\">\n                    <MenuIcon\n                        fontSize=\"large\"\n                        style={{paddingTop: 10, paddingLeft: 10, cursor: \"pointer\"}}\n                        color=\"action\"\n                        onClick={() => dispatch(openMenuAction())}/>\n                </div>\n            }\n            <div className=\"centered_box\">\n                <CentralNavbar/>\n            </div>\n            {\n                !isMobileDevice() &&\n                <div className=\"right_box\">\n                </div>\n            }\n        </div>\n    )\n}","import React, {useEffect} from \"react\";\nimport GridCell, {CellProps} from \"../cell/cell.component\";\nimport './grid.style.css';\nimport {GameState} from \"../../reducers/game/game.reducer\";\nimport {createStructuredSelector} from \"reselect\";\nimport {\n    selectGameGrid,\n    selectGameTime,\n    selectIsCrossedFlagSelected,\n    selectIsFlagSelected,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectIsGridGenerated,\n    selectIsLevelDialogOpened,\n    selectIsMagicWandSelected,\n    selectIsMenuOpened,\n    selectIsQuestionSelected,\n    selectIsRemoveQuestionSelected,\n    selectLevelParams,\n    selectMagicWandCounter\n} from \"../../reducers/game/game.selector\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {gameWon} from \"../../actions/actions\";\n\nconst GridComponent = (props: GameState) => {\n\n    const {\n        isGameWon,\n        isGameFailed,\n        grid,\n        level\n    } = props;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isGameWon) {\n            dispatch(gameWon())\n        }\n    })\n\n    const numberOfColumns = level.width;\n    const numberOfRows = level.height;\n\n    return (\n        <div className={\"grid\" + (isGameFailed || isGameWon ? \" disabled\" : \"\")}  style={{\n            gridTemplateColumns: `repeat(${numberOfColumns}, 33px)`,\n            gridTemplateRows: `repeat(${numberOfRows}, 33px)`\n        }}>\n            {\n                grid.cells.map((cellProps: Array<CellProps>) =>\n                    cellProps.map(cellProp => <GridCell\n                        key={cellProp.position.x + \"x\" + cellProp.position.y} {...cellProp}/>))\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, GameState>({\n    grid: selectGameGrid,\n    isGameFailed: selectIsGameFailed,\n    isGameWon: selectIsGameWon,\n    isGridCalculated: selectIsGridGenerated,\n    gameTime: selectGameTime,\n    isFlagSelected: selectIsFlagSelected,\n    isFlagCrossedSelected: selectIsCrossedFlagSelected,\n    isQuestionSelected: selectIsQuestionSelected,\n    isRemoveQuestionSelected: selectIsRemoveQuestionSelected,\n    isMagicWandSelected: selectIsMagicWandSelected,\n    isMenuOpened: selectIsMenuOpened,\n    magicWandCounter: selectMagicWandCounter,\n    isLevelDialogOpened: selectIsLevelDialogOpened,\n    level: selectLevelParams,\n})\n\nexport default connect(mapStateToProps)(GridComponent)","import React from \"react\";\nimport './body.style.css';\nimport GridComponent from \"../grid/grid.component\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\n\nexport const Body = () => {\n    return (\n        <div className=\"body_container\">\n            <div className=\"body\" style={isMobileDevice() ? {marginBottom: \"80px\"} : {}}>\n                <GridComponent/>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectIsCrossedFlagSelected,\n    selectIsFlagSelected,\n    selectIsMagicWandSelected,\n    selectIsQuestionSelected,\n    selectIsRemoveQuestionSelected, selectMagicWandCounter\n} from \"../../reducers/game/game.selector\";\nimport './bottom-panel.style.css';\nimport {Button} from \"../button/button.component\";\nimport {\n    selectCrossedFlag,\n    selectCrossedQuestion,\n    selectFlag,\n    selectMagicWand,\n    selectQuestion\n} from \"../../actions/actions\";\n\nexport const BottomPanel = () => {\n\n    const dispatch = useDispatch();\n    const isFlagSelected = useSelector(selectIsFlagSelected);\n    const isCrossedFlagSelected = useSelector(selectIsCrossedFlagSelected);\n    const isQuestionSelected = useSelector(selectIsQuestionSelected);\n    const isRemoveQuestionSelected = useSelector(selectIsRemoveQuestionSelected);\n    const isIsMagicWandSelected = useSelector(selectIsMagicWandSelected);\n    const magicWandCounter = useSelector(selectMagicWandCounter);\n\n    const buttonWidth = 60;\n    const buttonHeight = 60;\n    const smallButtonWidth = 30;\n    const smallButtonHeight = 30;\n\n    return (\n        <div className=\"bottom_panel\">\n            <div className=\"questions\">\n                <div className=\"add_question\" onClick={() => dispatch(selectQuestion())}>\n                    <Button isPressed={isQuestionSelected} height={buttonHeight} width={buttonWidth}>\n                        <img width=\"44\" height=\"44\" src=\"question.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n                <div className=\"remove_question small_button\" onClick={() => dispatch(selectCrossedQuestion())}>\n                    <Button isPressed={isRemoveQuestionSelected} height={smallButtonHeight} width={smallButtonWidth}>\n                        <img width=\"22\" height=\"22\" src=\"crossed_question.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n            </div>\n            <div className=\"magic_wand\" onClick={() => dispatch(selectMagicWand())} style={disableIdCounterZero(magicWandCounter)}>\n                <Button isPressed={isIsMagicWandSelected} height={buttonHeight} width={buttonWidth}>\n                    <img width=\"44\" height=\"44\" src=\"magic_wand.png\" alt=\"123\"/>\n                    <span className=\"magic_wand_counter\">{magicWandCounter}</span>\n                </Button>\n            </div>\n            <div className=\"flags\">\n                <div className=\"remove_flag small_button\" onClick={() => dispatch(selectCrossedFlag())}>\n                    <Button isPressed={isCrossedFlagSelected} height={smallButtonHeight} width={smallButtonWidth}>\n                        <img width=\"22\" height=\"22\" src=\"crossed_flag.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n                <div className=\"add_flag\" onClick={() => dispatch(selectFlag())}>\n                    <Button isPressed={isFlagSelected} height={buttonHeight} width={buttonWidth}>\n                        <img width=\"44\" height=\"44\" src=\"flag_big.png\" alt=\"123\"/>\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nfunction disableIdCounterZero(magicWandCounter: number): React.CSSProperties | undefined {\n    return magicWandCounter <= 0 ? {pointerEvents: \"none\", opacity: 0.5} : {};\n}\n","import React from \"react\";\nimport './menu.style.css';\nimport {ListItemIcon, ListItemText, MenuItem, Toolbar, Typography} from \"@material-ui/core\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport HelpIcon from '@material-ui/icons/Help';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {useDispatch, useSelector} from \"react-redux\";\n// @ts-ignore\nimport Drawer from 'react-motion-drawer';\nimport {selectIsMenuOpened} from \"../../reducers/game/game.selector\";\nimport {closeMenuAction, openLevelDialog, openMenuAction} from \"../../actions/actions\";\n\nexport const DrawerMenu = () => {\n\n    const dispatch = useDispatch();\n    const isMenuOpened = useSelector(selectIsMenuOpened);\n\n    return (\n        <Drawer className=\"drawer-menu\" open={isMenuOpened}\n                onChange={(isOpened: boolean) =>\n                    isOpened\n                        ? dispatch(openMenuAction())\n                        : dispatch(closeMenuAction())}\n                overlayColor=\"rgba(0, 0, 0, 0.4)\" width={250}>\n            <Toolbar>\n                <Typography variant=\"h6\">\n                    Menu\n                </Typography>\n                <CloseIcon\n                    fontSize=\"large\"\n                    color=\"action\"\n                    style={{marginLeft: \"auto\", cursor: \"pointer\"}}\n                    onClick={() => dispatch(closeMenuAction())}/>\n            </Toolbar>\n            <MenuItem>\n                <ListItemIcon>\n                    <TuneIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText primary=\"Level\" onClick={() => dispatch(openLevelDialog())}/>\n            </MenuItem>\n            <MenuItem>\n                <ListItemIcon>\n                    <SettingsIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText primary=\"Settings\"/>\n            </MenuItem>\n            <MenuItem>\n                <ListItemIcon>\n                    <HelpIcon fontSize=\"small\"/>\n                </ListItemIcon>\n                <ListItemText primary=\"Help\"/>\n            </MenuItem>\n        </Drawer>\n    )\n}","import React, {useState} from \"react\";\nimport './level-dialog.style.css';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    ListItemIcon,\n    Radio,\n    RadioGroup,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectIsLevelDialogOpened} from \"../../reducers/game/game.selector\";\nimport {changeLevel, closeLevelDialog} from \"../../actions/actions\";\n\nexport type GameComplexity = \"easy\" | \"medium\" | \"hard\" | \"crazy\";\nexport type GameScale = \"small\" | \"medium\" | \"big\" | \"huge\";\n\nexport interface GameLevel {\n    scale: GameScale\n    complexity: GameComplexity\n}\n\nexport const LevelDialog = () => {\n\n    const [scaleValue, setScale] = useState<GameScale>(\"small\");\n    const [complexityValue, setComplexity] = useState<GameComplexity>(\"easy\");\n\n    const handleChangeScale = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setScale((event.target as HTMLInputElement).value as GameScale);\n    };\n\n    const handleChangeComplexity = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setComplexity((event.target as HTMLInputElement).value as GameComplexity);\n    }\n\n    const dispatch = useDispatch();\n    const isLevelDialogOpened = useSelector(selectIsLevelDialogOpened);\n\n    return (\n        <Dialog open={isLevelDialogOpened} onClose={() => dispatch(closeLevelDialog())}\n                aria-labelledby=\"form-dialog-title\" fullWidth={true}>\n            <DialogTitle id=\"form-dialog-title\">\n                <Toolbar>\n                    <ListItemIcon>\n                        <TuneIcon fontSize=\"small\"/>\n                    </ListItemIcon>\n                    <Typography variant=\"h6\">Level</Typography>\n                </Toolbar>\n            </DialogTitle>\n            <DialogContent>\n                <div className=\"dialog_content\">\n                    <div className=\"radio_group\">\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Field scale</FormLabel>\n                            <RadioGroup aria-label=\"scale\" name=\"scale\" value={scaleValue} onChange={handleChangeScale}>\n                                <FormControlLabel value=\"small\" control={<Radio color=\"primary\"/>} label=\"Small\"/>\n                                <FormControlLabel value=\"medium\" control={<Radio color=\"primary\"/>} label=\"Medium\"/>\n                                <FormControlLabel value=\"big\" control={<Radio color=\"primary\"/>} label=\"Big\"/>\n                                <FormControlLabel value=\"huge\" control={<Radio color=\"secondary\"/>} label=\"Huge\"/>\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                    <div className=\"radio_group\">\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Complexity</FormLabel>\n                            <RadioGroup aria-label=\"complexity\" name=\"complexity\" value={complexityValue}\n                                        onChange={handleChangeComplexity}>\n                                <FormControlLabel value=\"easy\" control={<Radio color=\"primary\"/>} label=\"Easy\"/>\n                                <FormControlLabel value=\"medium\" control={<Radio color=\"primary\"/>} label=\"Medium\"/>\n                                <FormControlLabel value=\"hard\" control={<Radio color=\"primary\"/>} label=\"Hard\"/>\n                                <FormControlLabel value=\"crazy\" control={<Radio color=\"secondary\"/>} label=\"I'm crazy\"/>\n                            </RadioGroup>\n                        </FormControl>\n                    </div>\n                </div>\n                <DialogActions>\n                    <Button onClick={() => dispatch(closeLevelDialog())} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => dispatch(changeLevel({scale: scaleValue, complexity: complexityValue}))}\n                            color=\"primary\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </DialogContent>\n        </Dialog>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/header/header.component\";\nimport {Body} from \"./components/body/body.component\";\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\nimport {BottomPanel} from \"./components/bottom-panel/bottom-panel.component\";\nimport {DrawerMenu} from \"./components/menu-drawer/menu.component\";\nimport {LevelDialog} from \"./components/level-dialog/level-dialog.component\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <DrawerMenu/>\n            <Header/>\n            <Body/>\n            {\n                isMobileDevice() && <BottomPanel/>\n            }\n\n            <LevelDialog/>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Grid} from \"../reducers/game/game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../components/cell/cell.component\";\n\nexport function handleOnClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED || clickedCell.state === CellState.QUESTIONED) {\n        return;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.isFailed = true;\n    }\n\n    openCell(cells, clickedCell.position)\n}\n\nexport function addFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state !== CellState.OPEN) {\n        clickedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function removeFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED) {\n        clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function addQuestion(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state !== CellState.OPEN) {\n        clickedCell.state = CellState.QUESTIONED;\n    }\n}\n\nexport function removeQuestion(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.QUESTIONED) {\n        clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openCellSafely(cells: CellProps[][], cellPosition: CellPosition): boolean {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.OPEN || clickedCell.state === CellState.FLAGGED) {\n        return false;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.state = CellState.FLAGGED;\n    } else {\n        openCell(cells, clickedCell.position)\n    }\n    return true;\n}\n\nexport function handleOnRightClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n    switch (clickedCell.state) {\n        case CellState.INITIAL:\n            clickedCell.state = CellState.FLAGGED;\n            break;\n        case CellState.FLAGGED:\n            clickedCell.state = CellState.QUESTIONED;\n            break;\n        case CellState.QUESTIONED:\n            clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function handleOnDragNDroppedFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const droppedCell = cells[cellPosition.y][cellPosition.x];\n    if (droppedCell.state === CellState.INITIAL || droppedCell.state === CellState.QUESTIONED) {\n        droppedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function handleOnDragNDroppedRemoveFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const removeFlagCell = cells[cellPosition.y][cellPosition.x];\n    if (removeFlagCell.state !== CellState.OPEN) {\n        removeFlagCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openAllBombs(grid: Grid): void {\n    grid.cells.forEach(cellArray => cellArray.forEach(cell => {\n        if (cell.number === -1 && cell.state !== CellState.FLAGGED) {\n            cell.state = CellState.OPEN;\n        }\n    }));\n}\n\nexport function isAllCellsOpened(cells: Array<Array<CellProps>>) {\n    return cells.flat()\n        .filter(cell => cell.number !== -1)\n        .every(cell => cell.state === CellState.OPEN)\n}\n\nfunction openCell(cells: CellProps[][], cellPosition: CellPosition) {\n    if (isPositionOutOfBound(cells, cellPosition)) {\n        return;\n    }\n\n    const cell = cells[cellPosition.y][cellPosition.x];\n    if (cell.state === CellState.OPEN) {\n        return; // to avoid looping on neighbouring empty cells\n    }\n    cell.state = CellState.OPEN;\n\n    // open all cells around\n    if (cell.number === 0) {\n        for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n            for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n                if (i === cellPosition.x && j === cellPosition.y) {\n                    continue;\n                }\n\n                openCell(cells, {x: i, y: j})\n            }\n        }\n    }\n}\n\nexport function isPositionOutOfBound(grid: Array<Array<CellProps>>, cellPosition: CellPosition) {\n    return cellPosition.x < 0 || cellPosition.y < 0\n        || cellPosition.x >= grid.length || cellPosition.y >= grid[0].length;\n}\n","import {CellPosition, CellProps} from \"../components/cell/cell.component\";\nimport {isPositionOutOfBound} from \"./gridUtils\";\nimport {LevelParams} from \"../reducers/game/data\";\n\nexport function generateDefaultGrid({width, height, bombAmount}: LevelParams): Array<Array<CellProps>> {\n    let booleanArray = generateBooleanArray(width, height, bombAmount);\n    let shuffledBooleanArray = shuffle(booleanArray);\n    let booleanGrid = convertArrayIntoGrid(shuffledBooleanArray, width, height);\n    let numberGrid = convertBooleanGridToNumber(booleanGrid);\n    return convertNumbersIntoCellProps(numberGrid);\n}\n\nexport function moveBombsFromClickedCellAndCalculateGrid(gridCells: Array<Array<CellProps>>, position: CellPosition): Array<Array<CellProps>> {\n    let gridWithEmptyClickedCell = moveBombsFromClickedCellArea(position, gridCells)\n    return calculateCellBombNumbers(gridWithEmptyClickedCell);\n}\n\nexport function moveBombsFromClickedCellArea(position: CellPosition, grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    for (let i = position.x - 1; i <= position.x + 1; i++) {\n        for (let j = position.y - 1; j <= position.y + 1; j++) {\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number === -1) {\n                let newX;\n                let newY;\n                do {\n                    newX = randomInt(0, grid[0].length - 1);\n                    newY = randomInt(0, grid.length - 1);\n                } while(isNewPositionInClickedCellArea(newX, newY, position) || isBombCell(newX, newY, grid))\n                cell.number = 0;\n                grid[newY][newX].number = -1;\n            }\n        }\n    }\n    return grid;\n}\n\nfunction isBombCell(x: number, y: number, grid: Array<Array<CellProps>>) {\n    return grid[y][x].number === -1;\n}\n\nfunction isNewPositionInClickedCellArea(newX: number, newY: number, position: CellPosition) {\n    return (newX >= position.x - 1 && newX <= position.x + 1) && (newY >= position.y - 1 && newY <= position.y + 1);\n}\n\nfunction randomInt(min: number, max: number): number {\n    return min + Math.floor((max - min) * Math.random());\n}\n\nexport function generateBooleanArray(width: number, height: number, bombAmount: number): Array<boolean> {\n    const arrayLength = width * height;\n    const booleanArray = new Array<boolean>();\n\n    for (let i = 0; i < arrayLength; i++) {\n        if (i < bombAmount) {\n            booleanArray.push(true);\n        } else {\n            booleanArray.push(false);\n        }\n    }\n\n    return booleanArray;\n}\n\nfunction shuffle(array: Array<boolean>): Array<boolean> {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport function convertArrayIntoGrid<T>(array: Array<T>, width: number, height: number): Array<Array<T>> {\n    const grid = new Array<Array<T>>();\n\n    for (let i = 0; i < height; i++) {\n        grid.push(array.slice(width * i, width * (i + 1)));\n    }\n\n    return grid;\n}\n\nexport function convertBooleanGridToNumber(booleanGrid: Array<Array<boolean>>): Array<Array<number>> {\n    return booleanGrid.map((array: Array<boolean>) => array.map((cell: boolean) => cell ? -1 : 0));\n}\n\nexport function convertNumbersIntoCellProps(numberGrid: Array<Array<number>>): Array<Array<CellProps>> {\n    const cellGrid = new Array<Array<CellProps>>();\n\n    for (let i = 0; i < numberGrid.length; i++) {\n        let row = new Array<CellProps>();\n        for (let j = 0; j < numberGrid[0].length; j++) {\n            row.push(new CellProps({x: j, y: i}, numberGrid[i][j]))\n        }\n        cellGrid.push(row);\n    }\n\n    return cellGrid;\n}\n\nexport function calculateCellBombNumbers(grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    grid.forEach((array: Array<CellProps>) => array.forEach((cell: CellProps) => {\n        if (cell.number === -1) {\n            plusOneToEveryoneAroundBomb(cell.position, grid)\n        }\n    }))\n\n    return grid;\n}\n\nexport function plusOneToEveryoneAroundBomb(cellPosition: CellPosition, grid: Array<Array<CellProps>>) {\n    for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n        for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n            if (i === cellPosition.x && j === cellPosition.y) {\n                continue;\n            }\n\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number !== -1) {\n                cell.number += 1;\n            }\n        }\n    }\n}\n\n","import {GameComplexity, GameScale} from \"../../components/level-dialog/level-dialog.component\";\n\nexport interface LevelParams {\n    width: number,\n    height: number,\n    bombAmount: number,\n    magicWandAmount: number\n}\n\nexport const levelsTable = new Map<GameScale, Map<GameComplexity, LevelParams>>([\n    [\"small\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 10, height: 10, bombAmount: 15, magicWandAmount: 3}],\n        [\"medium\", {width: 10, height: 10, bombAmount: 20, magicWandAmount: 3}],\n        [\"hard\", {width: 10, height: 10, bombAmount: 25, magicWandAmount: 3}],\n        [\"crazy\", {width: 10, height: 10, bombAmount: 30, magicWandAmount: 3}]\n    ])],\n    [\"medium\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 20, height: 20, bombAmount: 60, magicWandAmount: 6}],\n        [\"medium\", {width: 20, height: 20, bombAmount: 80, magicWandAmount: 6}],\n        [\"hard\", {width: 20, height: 20, bombAmount: 100, magicWandAmount: 6}],\n        [\"crazy\", {width: 20, height: 20, bombAmount: 120, magicWandAmount: 6}]\n    ])],\n    [\"big\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 30, height: 30, bombAmount: 135, magicWandAmount: 10}],\n        [\"medium\", {width: 30, height: 30, bombAmount: 180, magicWandAmount: 10}],\n        [\"hard\", {width: 30, height: 30, bombAmount: 225, magicWandAmount: 10}],\n        [\"crazy\", {width: 30, height: 30, bombAmount: 270, magicWandAmount: 10}]\n    ])],\n    [\"huge\", new Map<GameComplexity, LevelParams>([\n        [\"easy\", {width: 50, height: 50, bombAmount: 375, magicWandAmount: 15}],\n        [\"medium\", {width: 50, height: 50, bombAmount: 500, magicWandAmount: 15}],\n        [\"hard\", {width: 50, height: 50, bombAmount: 625, magicWandAmount: 15}],\n        [\"crazy\", {width: 50, height: 50, bombAmount: 750, magicWandAmount: 15}]\n    ])]\n])","import * as actions from \"../../actions/actions\";\nimport {CellPosition, CellProps} from \"../../components/cell/cell.component\";\nimport {\n    addFlag,\n    addQuestion,\n    handleOnClick,\n    handleOnDragNDroppedFlag,\n    handleOnDragNDroppedRemoveFlag,\n    handleOnRightClick,\n    isAllCellsOpened,\n    openAllBombs,\n    openCellSafely,\n    removeFlag,\n    removeQuestion\n} from \"../../utils/gridUtils\";\nimport {generateDefaultGrid, moveBombsFromClickedCellAndCalculateGrid} from \"../../utils/gridGeneratorUtils\";\nimport {LevelParams, levelsTable} from \"./data\";\nimport {ActionType, getType, Reducer} from \"typesafe-actions\";\n\ntype Actions = ActionType<typeof actions>\n\nexport interface Grid {\n    cells: Array<Array<CellProps>>\n}\n\nexport interface GameState {\n    isGameWon: boolean;\n    isGameFailed: boolean\n    isGridCalculated: boolean;\n    gameTime: number;\n    isFlagSelected: boolean;\n    isFlagCrossedSelected: boolean;\n    isQuestionSelected: boolean;\n    isRemoveQuestionSelected: boolean;\n    isMagicWandSelected: boolean;\n    magicWandCounter: number;\n    isMenuOpened: boolean;\n    isLevelDialogOpened: boolean;\n    level: LevelParams,\n    grid: Grid;\n}\n\nexport const INITIAL_LEVEL_PARAMS: LevelParams = levelsTable.get(\"small\")?.get(\"easy\") as LevelParams;\n\nexport const INITIAL_STATE: GameState = {\n    isGameWon: false,\n    isGameFailed: false,\n    isGridCalculated: false,\n    gameTime: 0,\n    isFlagSelected: false,\n    isFlagCrossedSelected: false,\n    isQuestionSelected: false,\n    isRemoveQuestionSelected: false,\n    isMagicWandSelected: false,\n    magicWandCounter: INITIAL_LEVEL_PARAMS.magicWandAmount,\n    isMenuOpened: false,\n    isLevelDialogOpened: false,\n    level: INITIAL_LEVEL_PARAMS,\n    grid: {\n        cells: generateDefaultGrid(INITIAL_LEVEL_PARAMS)\n    }\n}\n\nexport const gameReducer: Reducer<GameState, Actions> = (state: GameState = INITIAL_STATE, action: Actions): GameState => {\n    switch (action.type) {\n        case getType(actions.startGame):\n            return createNewGameState(action.payload);\n        case getType(actions.cellClicked):\n            let cells = rerenderGridOnClick(state, action.payload);\n            return {\n                ...state,\n                grid: {\n                    cells: cells\n                },\n                isGameWon: isGameWon(cells),\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case getType(actions.cellClickFailed):\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n                isGameFailed: true,\n            }\n        case getType(actions.cellRightClicked):\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnRightClick(state.grid.cells, action.payload),\n                }\n            }\n        case getType(actions.gameWon):\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n            }\n        case getType(actions.incrementTime):\n            return {\n                ...state,\n                gameTime: isGameInProcess(state) ? state.gameTime + 1 : state.gameTime,\n            }\n        case getType(actions.dragNDropFlag):\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnDragNDroppedFlag(state.grid.cells, action.payload.cellToAddFlag, action.payload.cellToRemoveFlag),\n                }\n            }\n        case getType(actions.selectFlag):\n            return {\n                ...state,\n                isFlagSelected: !state.isFlagSelected,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case getType(actions.selectCrossedFlag):\n            return {\n                ...state,\n                isFlagCrossedSelected: !state.isFlagCrossedSelected,\n                isFlagSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case getType(actions.selectQuestion):\n            return {\n                ...state,\n                isQuestionSelected: !state.isQuestionSelected,\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isRemoveQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case getType(actions.selectCrossedQuestion):\n            return {\n                ...state,\n                isRemoveQuestionSelected: !state.isRemoveQuestionSelected,\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isMagicWandSelected: false\n            }\n        case getType(actions.selectMagicWand):\n            return {\n                ...state,\n                isMagicWandSelected: state.isMagicWandSelected ? false : state.isGridCalculated && state.magicWandCounter > 0,\n                isFlagSelected: false,\n                isFlagCrossedSelected: false,\n                isQuestionSelected: false,\n                isRemoveQuestionSelected: false\n            }\n        case getType(actions.openMenuAction):\n            return {\n                ...state,\n                isMenuOpened: true\n            }\n        case getType(actions.closeMenuAction):\n            return {\n                ...state,\n                isMenuOpened: false\n            }\n        case getType(actions.openLevelDialog):\n            return {\n                ...state,\n                isLevelDialogOpened: true,\n                isMenuOpened: false\n            }\n        case getType(actions.closeLevelDialog):\n            return {\n                ...state,\n                isLevelDialogOpened: false\n            }\n        case getType(actions.changeLevel):\n            const levelParams: LevelParams = levelsTable.get(action.payload.scale)?.get(action.payload.complexity) as LevelParams;\n            return createNewGameState(levelParams)\n        default:\n            return INITIAL_STATE;\n    }\n}\n\nfunction createNewGameState(levelParams: LevelParams) {\n    return {\n        ...INITIAL_STATE,\n        magicWandCounter: levelParams.magicWandAmount,\n        level: levelParams,\n        grid: {\n            cells: generateDefaultGrid(levelParams)\n        }\n    };\n}\n\nfunction rerenderGridOnDragNDroppedFlag(cells: Array<Array<CellProps>>, cellToAddFlag?: CellPosition, cellToRemoveFlag?: CellPosition): Array<Array<CellProps>> {\n    if (cellToRemoveFlag) {\n        handleOnDragNDroppedRemoveFlag(cells, cellToRemoveFlag);\n    }\n    if (cellToAddFlag) {\n        handleOnDragNDroppedFlag(cells, cellToAddFlag);\n    }\n    return cells;\n}\n\nfunction isGameInProcess(state: GameState) {\n    return state.isGridCalculated && !state.isGameFailed && !state.isGameWon;\n}\n\nfunction isGameWon(cells: CellProps[][]) {\n    return isAllCellsOpened(cells);\n}\n\nfunction openAllBombsGrid(grid: Grid) {\n    openAllBombs(grid)\n    return grid;\n}\n\nfunction rerenderGridOnClick(state: GameState, cellPosition: CellPosition): CellProps[][] {\n    let gridCells = state.grid.cells;\n\n    if (state.isFlagSelected) {\n        addFlag(gridCells, cellPosition);\n    } else if (state.isFlagCrossedSelected) {\n        removeFlag(gridCells, cellPosition);\n    } else if (state.isQuestionSelected) {\n        addQuestion(gridCells, cellPosition);\n    } else if (state.isRemoveQuestionSelected) {\n        removeQuestion(gridCells, cellPosition);\n    } else if (state.isMagicWandSelected) {\n        const isUsed = openCellSafely(gridCells, cellPosition);\n        if (isUsed) {\n            state.magicWandCounter--;\n        }\n    } else {\n        if (!state.isGridCalculated) {\n            gridCells = moveBombsFromClickedCellAndCalculateGrid(gridCells, cellPosition);\n            state.isGridCalculated = true;\n        }\n        handleOnClick(gridCells, cellPosition);\n    }\n    return gridCells;\n}\n\nfunction rerenderGridOnRightClick(cells: CellProps[][], cellPosition: CellPosition): CellProps[][] {\n    handleOnRightClick(cells, cellPosition);\n    return cells;\n}\n","import {combineReducers} from \"redux\";\nimport {gameReducer, GameState} from \"./game/game.reducer\";\n\nexport interface AppState {\n    gameState: GameState\n}\n\nexport const reducers = combineReducers<AppState>({\n    gameState: gameReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducers} from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\nimport {DndProvider} from \"react-dnd\";\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\nimport {TouchBackend} from 'react-dnd-touch-backend'\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(reducers, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <DndProvider backend={isMobileDevice() ? TouchBackend : HTML5Backend}>\n                <App/>\n            </DndProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}