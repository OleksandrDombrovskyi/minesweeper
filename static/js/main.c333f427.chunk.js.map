{"version":3,"sources":["actions/actions.tsx","components/cell/cell.component.tsx","reducers/game/game.selector.tsx","utils/gridUtils.tsx","utils/gridGeneratorUtils.tsx","components/counter/counter.component.tsx","utils/timerUtils.tsx","components/timer/timer.component.tsx","components/header/header.component.tsx","components/grid/grid.component.tsx","components/body/body.component.jsx","App.tsx","serviceWorker.ts","reducers/game/game.reducer.tsx","reducers/rootReducer.tsx","index.tsx"],"names":["ActionTypes","CellState","CellProps","position","number","state","isFailed","this","INITIAL","onCellRightClick","dispatch","event","preventDefault","type","cellRightClicked","payload","onCellClick","cellClicked","connect","ownProps","selectCellNumber","selectCellState","selectCellIsFailed","props","useDispatch","useEffect","cellClickFailed","console","log","className","onClick","onContextMenu","width","height","OPEN","src","alt","getBombCellElement","getNumberCellElement","FLAGGED","QUESTIONED","getCellElement","selectGameState","gameState","selectGameGrid","createSelector","grid","selectIsGameFailed","isGameFailed","selectIsGameWon","isGameWon","selectIsGridGenerated","isGridGenerated","selectGameGridBombs","cells","selectClickedCell","cellsProps","y","x","cellProps","selectBombAmount","flat","filter","cell","length","selectFlagAmount","selectGameTime","gameTime","handleOnClick","cellPosition","clickedCell","openCell","isPositionOutOfBound","i","j","generatedDefaultGrid","generateGrid","gridWithEmptyClickedCell","newX","newY","randomInt","isNewPositionInClickedCellArea","isBombCell","moveBombsFromClickedCellArea","numberGrid","cellGrid","Array","row","push","convertNumbersIntoCellProps","booleanGrid","map","array","convertBooleanGridToNumber","slice","convertArrayIntoGrid","Math","floor","random","shuffle","arrayLength","bombAmount","booleanArray","generateBooleanArray","forEach","plusOneToEveryoneAroundBomb","min","max","Counter","useSelector","flagAmount","formatInDoubleDigit","timeValue","intervalId","Timer","setInterval","incrementTime","clearInterval","timeSeconds","hours","minutes","seconds","toString","formatTime","Header","imageName","getSmileImageName","startGame","mapStateToProps","createStructuredSelector","gameWon","cellProp","key","Body","App","Boolean","window","location","hostname","match","INITIAL_STATE","isGameInProcess","every","isAllCellsOpened","openAllBombsGrid","cellArray","openAllBombs","rerenderGridOnClick","rerenderGridOnRightClick","handleOnRightClick","reducers","combineReducers","action","generatedGrid","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c333f427.chunk.js","sourcesContent":["import {GameState} from \"../reducers/game/game.reducer\";\nimport {CellPosition} from \"../components/cell/cell.component\";\n\nexport enum ActionTypes {\n    startGame,\n    cellClicked,\n    cellClickFailed,\n    gameWon,\n    cellRightClicked,\n    incrementTime,\n}\n\nexport interface StartGame {\n    type: ActionTypes.startGame,\n    payload: GameState\n}\n\nexport interface CellClicked {\n    type: ActionTypes.cellClicked,\n    payload: CellPosition\n}\n\nexport interface CellRightClicked {\n    type: ActionTypes.cellRightClicked,\n    payload: CellPosition\n}\n\nexport interface GameFailed {\n    type: ActionTypes.cellClickFailed,\n    payload: null\n}\n\nexport interface GameWon {\n    type: ActionTypes.gameWon,\n    payload: null\n}\n\nexport interface IncrementTime {\n    type: ActionTypes.incrementTime,\n    payload: null\n}\n\nexport type Action = StartGame | CellClicked | GameFailed | GameWon | CellRightClicked | IncrementTime;","import React, {Dispatch, MouseEvent, useEffect} from \"react\";\nimport './cell.style.css';\nimport {connect, useDispatch} from \"react-redux\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {selectCellIsFailed, selectCellNumber, selectCellState} from \"../../reducers/game/game.selector\";\n\nexport enum CellState {\n    INITIAL,\n    FLAGGED,\n    QUESTIONED,\n    OPEN,\n}\n\nexport interface CellPosition {\n    x: number;\n    y: number;\n}\n\nexport class CellProps {\n    position: CellPosition;\n    number: number;\n    state: CellState;\n    isFailed: boolean;\n\n    constructor(position: CellPosition, number: number) {\n        this.position = position;\n        this.number = number;\n        this.state = CellState.INITIAL;\n        this.isFailed = false;\n    }\n}\n\nconst GridCell = (props: CellProps) => {\n\n    const {position, number, state, isFailed} = props;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isFailed) {\n            dispatch({type: ActionTypes.cellClickFailed});\n        }\n    });\n\n    console.log(\"Render cell\");\n\n    return (\n        <div className=\"gridCell\" onClick={onCellClick(position, dispatch)}\n             onContextMenu={onCellRightClick(position, dispatch)}>\n            {\n                getCellElement(state, number, isFailed)\n            }\n        </div>\n    );\n}\n\nfunction onCellRightClick(position: CellPosition, dispatch: Dispatch<any>) {\n    return (event: MouseEvent) => {\n        // prevent opening contextual menu on right button click\n        event.preventDefault();\n        dispatch({type: ActionTypes.cellRightClicked, payload: position})\n    }\n}\n\nfunction onCellClick(position: CellPosition, dispatch: Dispatch<Action>) {\n    return () => {\n        dispatch({type: ActionTypes.cellClicked, payload: position})\n    };\n}\n\nfunction getCellElement(state: CellState, number: number, isFailed: boolean) {\n    switch (state) {\n        case CellState.INITIAL:\n            return getInitialCellElement();\n        case CellState.OPEN:\n            if (number === -1) {\n                return getBombCellElement(isFailed);\n            } else if (number > 0) {\n                return getNumberCellElement(number);\n            } else {\n                return getEmptyCellElement();\n            }\n        case CellState.FLAGGED:\n            return getFlaggedCellElement();\n        case CellState.QUESTIONED:\n            return getQuestionedCellElement();\n    }\n}\n\nfunction getInitialCellElement() {\n    return (\n        <svg width=\"33\" height=\"33\">\n            <rect className=\"initial\" width=\"30\" height=\"30\"/>\n        </svg>\n    );\n}\n\nfunction getQuestionedCellElement() {\n    return (\n        <div>\n            <svg width=\"33\" height=\"33\">\n                <rect className=\"initial\" width=\"30\" height=\"30\"/>\n            </svg>\n            <span className=\"question\">?</span>\n        </div>\n\n    );\n}\n\nfunction getFlaggedCellElement() {\n    return (\n        <div className=\"img-overlay-svg\">\n            <svg className=\"cell-sign\" width=\"33\" height=\"33\">\n                <rect className=\"initial\" width=\"30\" height=\"30\"/>\n            </svg>\n            <img className=\"cell-sign flag\" width=\"22\" height=\"22\" src=\"flag.png\" alt=\"123\"/>\n        </div>\n    );\n}\n\nfunction getBombCellElement(isFailed: boolean) {\n    return (\n        <div className=\"img-overlay-svg\">\n            <svg width=\"33\" height=\"33\">\n                <rect className={\"open\" + (isFailed ? \" failedCell\" : \"\")} width=\"30\" height=\"30\"/>\n            </svg>\n            <img width=\"33\" height=\"33\" src=\"bomb.svg\" alt=\"123\"/>\n        </div>\n    );\n}\n\nfunction getNumberCellElement(number: number) {\n    return (\n        <div>\n            <svg width=\"33\" height=\"33\">\n                <rect className=\"open\" width=\"30\" height=\"30\"/>\n            </svg>\n            <span className={\"number_\" + number}>{number}</span>\n        </div>\n    );\n}\n\nfunction getEmptyCellElement() {\n    return (\n        <svg width=\"33\" height=\"33\">\n            <rect className=\"open\" width=\"30\" height=\"30\"/>\n        </svg>\n    );\n}\n\nconst mapStateToProps = (state: AppState, ownProps: CellProps): CellProps => ({\n    position: ownProps.position,\n    number: selectCellNumber(ownProps.position)(state),\n    state: selectCellState(ownProps.position)(state),\n    isFailed: selectCellIsFailed(ownProps.position)(state)\n})\n\nexport default connect(mapStateToProps)(GridCell)","import {createSelector} from 'reselect';\nimport {AppState} from \"../rootReducer\";\nimport {GameState, Grid} from \"./game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../../components/cell/cell.component\";\n\nconst selectGameState = (state: AppState): GameState => state.gameState;\n\nexport const selectGameGrid = createSelector<AppState, GameState, Grid>(\n    [selectGameState],\n    (gameState: GameState) => gameState.grid\n);\n\nexport const selectIsGameFailed = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameFailed\n)\n\nexport const selectIsGameWon = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameWon\n)\n\nexport const selectIsGridGenerated = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGridGenerated\n)\n\nexport const selectGameGridBombs = createSelector<AppState, Grid, CellProps[][]>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells\n)\n\nexport const selectClickedCell = (position: CellPosition) => createSelector<AppState, CellProps[][], CellProps>(\n    [selectGameGridBombs],\n    (cellsProps: CellProps[][]) => cellsProps[position.y][position.x]\n)\n\nexport const selectCellNumber = (position: CellPosition) => createSelector<AppState, CellProps, number>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.number\n)\n\nexport const selectCellState = (position: CellPosition) => createSelector<AppState, CellProps, CellState>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.state\n)\n\nexport const selectCellIsFailed = (position: CellPosition) => createSelector<AppState, CellProps, boolean>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.isFailed\n)\n\nexport const selectBombAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.number === -1).length\n)\n\nexport const selectFlagAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.state === CellState.FLAGGED).length\n)\n\nexport const selectGameTime = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.gameTime\n)","import {Grid} from \"../reducers/game/game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../components/cell/cell.component\";\n\nexport function handleOnClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED || clickedCell.state === CellState.QUESTIONED) {\n        return;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.isFailed = true;\n    }\n\n    openCell(cells, clickedCell.position)\n}\n\nexport function handleOnRightClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n    switch (clickedCell.state) {\n        case CellState.INITIAL:\n            clickedCell.state = CellState.FLAGGED;\n            break;\n        case CellState.FLAGGED:\n            clickedCell.state = CellState.QUESTIONED;\n            break;\n        case CellState.QUESTIONED:\n            clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openAllBombs(grid: Grid): void {\n    grid.cells.forEach(cellArray => cellArray.forEach(cell => {\n        if (cell.number === -1 && cell.state !== CellState.FLAGGED) {\n            cell.state = CellState.OPEN;\n        }\n    }));\n}\n\nexport function isAllCellsOpened(cells: Array<Array<CellProps>>) {\n    return cells.flat()\n        .filter(cell => cell.number !== -1)\n        .every(cell => cell.state === CellState.OPEN)\n}\n\nfunction openCell(cells: CellProps[][], cellPosition: CellPosition) {\n    if (isPositionOutOfBound(cells, cellPosition)) {\n        return;\n    }\n\n    const cell = cells[cellPosition.y][cellPosition.x];\n    if (cell.state === CellState.OPEN) {\n        return; // to avoid looping on neighbouring empty cells\n    }\n    cell.state = CellState.OPEN;\n\n    // open all cells around\n    if (cell.number === 0) {\n        for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n            for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n                if (i === cellPosition.x && j === cellPosition.y) {\n                    continue;\n                }\n\n                openCell(cells, {x: i, y: j})\n            }\n        }\n    }\n}\n\nexport function isPositionOutOfBound(grid: Array<Array<CellProps>>, cellPosition: CellPosition) {\n    return cellPosition.x < 0 || cellPosition.y < 0\n        || cellPosition.x >= grid.length || cellPosition.y >= grid[0].length;\n}\n","import {CellPosition, CellProps} from \"../components/cell/cell.component\";\nimport {isPositionOutOfBound} from \"./gridUtils\";\n\nexport function generatedDefaultGrid(): Array<Array<CellProps>> {\n    return generateGrid({x: 0, y: 0}, 10, 10);\n}\n\nexport function generateGrid(position: CellPosition, width: number, height: number): Array<Array<CellProps>> {\n    let booleanArray = generateBooleanArray(width, height);\n    let shuffledBooleanArray = shuffle(booleanArray);\n    let booleanGrid = convertArrayIntoGrid(shuffledBooleanArray, width, height);\n    let numberGrid = convertBooleanGridToNumber(booleanGrid);\n    let cellPropsGridWithZeros = convertNumbersIntoCellProps(numberGrid);\n    let gridWithEmptyClickedCell = moveBombsFromClickedCellArea(position, cellPropsGridWithZeros)\n    return calculateCellBombNumbers(gridWithEmptyClickedCell);\n}\n\nexport function moveBombsFromClickedCellArea(position: CellPosition, grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    for (let i = position.x - 1; i <= position.x + 1; i++) {\n        for (let j = position.y - 1; j <= position.y + 1; j++) {\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number === -1) {\n                let newX;\n                let newY;\n                do {\n                    newX = randomInt(0, grid[0].length - 1);\n                    newY = randomInt(0, grid.length - 1);\n                } while(isNewPositionInClickedCellArea(newX, newY, position) || isBombCell(newX, newY, grid))\n                cell.number = 0;\n                grid[newY][newX].number = -1;\n            }\n        }\n    }\n    return grid;\n}\n\nfunction isBombCell(x: number, y: number, grid: Array<Array<CellProps>>) {\n    return grid[y][x].number === -1;\n}\n\nfunction isNewPositionInClickedCellArea(newX: number, newY: number, position: CellPosition) {\n    return (newX >= position.x - 1 && newX <= position.x + 1) && (newY >= position.y - 1 && newY <= position.y + 1);\n}\n\nfunction randomInt(min: number, max: number): number {\n    return min + Math.floor((max - min) * Math.random());\n}\n\nexport function generateBooleanArray(width: number, height: number): Array<boolean> {\n    const arrayLength = width * height;\n    const bombAmount = Math.floor(arrayLength / 4);\n    const booleanArray = new Array<boolean>();\n\n    for (let i = 0; i < arrayLength; i++) {\n        if (i < bombAmount) {\n            booleanArray.push(true);\n        } else {\n            booleanArray.push(false);\n        }\n    }\n\n    return booleanArray;\n}\n\nfunction shuffle(array: Array<boolean>): Array<boolean> {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport function convertArrayIntoGrid<T>(array: Array<T>, width: number, height: number): Array<Array<T>> {\n    const grid = new Array<Array<T>>();\n\n    for (let i = 0; i < height; i++) {\n        grid.push(array.slice(width * i, width * (i + 1)));\n    }\n\n    return grid;\n}\n\nexport function convertBooleanGridToNumber(booleanGrid: Array<Array<boolean>>): Array<Array<number>> {\n    return booleanGrid.map((array: Array<boolean>) => array.map((cell: boolean) => cell ? -1 : 0));\n}\n\nexport function convertNumbersIntoCellProps(numberGrid: Array<Array<number>>): Array<Array<CellProps>> {\n    const cellGrid = new Array<Array<CellProps>>();\n\n    for (let i = 0; i < numberGrid.length; i++) {\n        let row = new Array<CellProps>();\n        for (let j = 0; j < numberGrid[0].length; j++) {\n            row.push(new CellProps({x: j, y: i}, numberGrid[i][j]))\n        }\n        cellGrid.push(row);\n    }\n\n    return cellGrid;\n}\n\nexport function calculateCellBombNumbers(grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    grid.forEach((array: Array<CellProps>) => array.forEach((cell: CellProps) => {\n        if (cell.number === -1) {\n            plusOneToEveryoneAroundBomb(cell.position, grid)\n        }\n    }))\n\n    return grid;\n}\n\nexport function plusOneToEveryoneAroundBomb(cellPosition: CellPosition, grid: Array<Array<CellProps>>) {\n    for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n        for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n            if (i === cellPosition.x && j === cellPosition.y) {\n                continue;\n            }\n\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number !== -1) {\n                cell.number += 1;\n            }\n        }\n    }\n}\n\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectBombAmount, selectFlagAmount} from \"../../reducers/game/game.selector\";\nimport './counter.style.css';\n\nexport const Counter = () => {\n\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    return (\n        <div>\n            <span className=\"bomb_amount\">{bombAmount - flagAmount}</span>\n            <div className=\"image_container\"><img className=\"bomb_image\" src=\"bomb.svg\" alt=\"123\"/></div>\n        </div>\n    )\n}","export function formatTime(timeSeconds: number): string {\n    const hours = Math.floor(timeSeconds / 3600);\n    const minutes = Math.floor((timeSeconds % 3600) / 60);\n    const seconds = (timeSeconds % 3600) % 60;\n    return formatInDoubleDigit(hours.toString()) + \":\" + formatInDoubleDigit(minutes.toString()) + \":\" + formatInDoubleDigit(seconds.toString());\n}\n\nfunction formatInDoubleDigit(timeValue: string) {\n    if (timeValue.length === 0) {\n        return \"00\";\n    } else if(timeValue.length === 1) {\n        return \"0\" + timeValue;\n    } else {\n        return timeValue;\n    }\n}\n","import React, {useEffect} from \"react\";\nimport {formatTime} from \"../../utils/timerUtils\";\nimport './timer.style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectGameTime} from \"../../reducers/game/game.selector\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nlet intervalId: NodeJS.Timeout;\n\nexport const Timer = () => {\n    const gameTime = useSelector(selectGameTime);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        intervalId = setInterval(\n            () => dispatch({type: ActionTypes.incrementTime}),\n            1000\n        );\n\n        return () => {\n            clearInterval(intervalId);\n        }\n    })\n\n    return (\n        <div>\n            <span className=\"timer_span\">{formatTime(gameTime)}</span>\n        </div>\n    );\n}","import React, {Dispatch} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectBombAmount,\n    selectFlagAmount,\n    selectIsGameFailed,\n    selectIsGameWon\n} from \"../../reducers/game/game.selector\";\nimport \"./header.style.css\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {generatedDefaultGrid} from \"../../utils/gridGeneratorUtils\";\nimport {Counter} from \"../counter/counter.component\";\nimport {Timer} from \"../timer/timer.component\";\n\nexport const Header = () => {\n    const isGameWon = useSelector(selectIsGameWon)\n    const isGameFailed = useSelector(selectIsGameFailed)\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    const dispatch = useDispatch();\n\n    let imageName = getSmileImageName(isGameFailed, isGameWon, bombAmount, flagAmount);\n\n    return (\n        <div className=\"header\">\n            <div className=\"counter\">\n                <Counter/>\n            </div>\n            <div className=\"smile\">\n                <img className=\"smile_image\" src={\"smiles/\" + imageName} alt=\"fail\" onClick={startGame(dispatch)}/>\n            </div>\n            <div className=\"timer\">\n                <Timer/>\n            </div>\n        </div>\n    )\n}\n\nfunction startGame(dispatch: Dispatch<Action>) {\n    return () => dispatch({\n        type: ActionTypes.startGame,\n        payload: {\n            isGameWon: false,\n            isGameFailed: false,\n            isGridGenerated: false,\n            gameTime: 0,\n            grid: {\n                cells: generatedDefaultGrid()\n            }\n        }\n    })\n}\n\nfunction getSmileImageName(isGameFailed: boolean, isGameWon: boolean, bombAmount: number, flagAmount: number) {\n    if (isGameFailed) {\n        return \"failed.png\";\n    } else if (isGameWon) {\n        return \"win.png\";\n    } else if (bombAmount < flagAmount) {\n        return \"laugh.png\";\n    } else {\n        return \"start.png\";\n    }\n}\n","import React, {useEffect} from \"react\";\nimport GridCell, {CellProps} from \"../cell/cell.component\";\nimport './grid.style.css';\nimport {GameState} from \"../../reducers/game/game.reducer\";\nimport {createStructuredSelector} from \"reselect\";\nimport {\n    selectGameGrid, selectGameTime,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectIsGridGenerated\n} from \"../../reducers/game/game.selector\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nconst GridComponent = (props: GameState) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (props.isGameWon) {\n            dispatch({type: ActionTypes.gameWon})\n        }\n    })\n\n    console.log(\"Render grid\");\n    return (\n        <div className={\"grid\" + (props.isGameFailed || props.isGameWon ? \" disabled\" : \"\")}>\n            {\n                props.grid.cells.map((cellProps: Array<CellProps>) =>\n                    cellProps.map(cellProp => <GridCell\n                        key={cellProp.position.x + \"x\" + cellProp.position.y} {...cellProp}/>))\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, GameState>({\n    grid: selectGameGrid,\n    isGameFailed: selectIsGameFailed,\n    isGameWon: selectIsGameWon,\n    isGridGenerated: selectIsGridGenerated,\n    gameTime: selectGameTime\n})\n\nexport default connect(mapStateToProps)(GridComponent)","import React from \"react\";\nimport './body.style.css';\nimport GridComponent from \"../grid/grid.component\";\n\nexport const Body = () => {\n    // const grid = useSelector(selectGameGrid)\n    return (\n        <div className=\"body_container\">\n            <div className=\"body\">\n                <GridComponent/>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/header/header.component\";\nimport {Body} from \"./components/body/body.component\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Body/>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Action, ActionTypes} from \"../../actions/actions\";\nimport {CellPosition, CellProps} from \"../../components/cell/cell.component\";\nimport {handleOnClick, handleOnRightClick, isAllCellsOpened, openAllBombs} from \"../../utils/gridUtils\";\nimport {generatedDefaultGrid, generateGrid} from \"../../utils/gridGeneratorUtils\";\n\nexport interface Grid {\n    cells: Array<Array<CellProps>>\n}\n\nexport interface GameState {\n    isGameWon: boolean;\n    isGameFailed: boolean\n    isGridGenerated: boolean;\n    gameTime: number;\n    grid: Grid\n}\n\nexport const INITIAL_STATE: GameState = {\n    isGameWon: false,\n    isGameFailed: false,\n    isGridGenerated: false,\n    gameTime: 0,\n    grid: {\n        cells: generatedDefaultGrid()\n    }\n}\n\nexport const gameReducer = (state: GameState = INITIAL_STATE, action: Action): GameState => {\n    switch (action.type) {\n        case ActionTypes.startGame:\n            return action.payload;\n        case ActionTypes.cellClicked:\n            let generatedGrid;\n\n            if (!state.isGridGenerated) {\n                generatedGrid = generateGrid(action.payload, 10, 10);\n                state.isGridGenerated = true;\n            } else {\n                generatedGrid = state.grid.cells;\n            }\n\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnClick(generatedGrid, action.payload)\n                },\n                isGameWon: isGameWon(generatedGrid)\n            }\n        case ActionTypes.cellClickFailed:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n                isGameFailed: true,\n            }\n        case ActionTypes.cellRightClicked:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnRightClick(state.grid.cells, action.payload),\n                }\n            }\n        case ActionTypes.gameWon:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n            }\n        case ActionTypes.incrementTime:\n            return {\n                ...state,\n                gameTime: isGameInProcess(state) ? state.gameTime + 1 : state.gameTime,\n            }\n        default:\n            return INITIAL_STATE;\n    }\n}\n\nfunction isGameInProcess(state: GameState) {\n    return state.isGridGenerated && !state.isGameFailed && !state.isGameWon;\n}\n\nfunction isGameWon(cells: CellProps[][]) {\n    return isAllCellsOpened(cells);\n}\n\nfunction openAllBombsGrid(grid: Grid) {\n    openAllBombs(grid)\n    return grid;\n}\n\nfunction rerenderGridOnClick(cells: CellProps[][], cellPosition: CellPosition) {\n    handleOnClick(cells, cellPosition);\n    return cells;\n}\n\nfunction rerenderGridOnRightClick(cells: CellProps[][], cellPosition: CellPosition): CellProps[][]  {\n    handleOnRightClick(cells, cellPosition);\n    return cells;\n}\n","import {combineReducers} from \"redux\";\nimport {gameReducer, GameState} from \"./game/game.reducer\";\n\nexport interface AppState {\n    gameState: GameState\n}\n\nexport const reducers = combineReducers<AppState>({\n    gameState: gameReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducers} from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(reducers, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}