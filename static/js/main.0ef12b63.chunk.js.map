{"version":3,"sources":["actions/actions.tsx","utils/detectmobilebrowser.js","utils/dragNDropUtils.tsx","components/cell/cell.component.tsx","reducers/game/game.selector.tsx","utils/gridUtils.tsx","utils/gridGeneratorUtils.tsx","components/counter/counter.component.tsx","utils/timerUtils.tsx","components/timer/timer.component.tsx","components/flags/flags.component.tsx","reducers/game/game.reducer.tsx","components/header/header.component.tsx","components/grid/grid.component.tsx","components/body/body.component.jsx","components/bottom-panel/bottom-panel.component.tsx","App.tsx","serviceWorker.ts","reducers/rootReducer.tsx","index.tsx"],"names":["ActionTypes","isMobileDevice","some","toMatchItem","navigator","userAgent","match","dragNDropFlagOnGrid","dispatch","event","button","targetFlag","currentTarget","parentElement","ondragstart","gridCellToRemoveFlag","getClosest","document","body","appendChild","prevPosition","style","position","prevZIndex","zIndex","prevTop","top","prevLeft","left","moveFlagAt","pageX","pageY","onMouseMove","addEventListener","onmouseup","removeEventListener","removeChild","gridCellToAddFlag","elementFromPoint","cellToRemoveFlagPosition","getCellPosition","cellToAddFlagPosition","x","y","type","dragNDroppedFlag","payload","cellToAddFlag","cellToRemoveFlag","element","gridCellId","id","substr","indexOf","offsetWidth","offsetHeight","CellState","selector","matches","CellProps","number","state","isFailed","this","INITIAL","onCellRightClick","preventDefault","cellRightClicked","onCellClick","cellClicked","connect","ownProps","selectCellNumber","selectCellState","selectCellIsFailed","props","useDispatch","useEffect","cellClickFailed","className","onClick","onContextMenu","width","height","OPEN","src","alt","getBombCellElement","getNumberCellElement","FLAGGED","onMouseDown","getFlaggedCellElement","QUESTIONED","getCellElement","selectGameState","gameState","selectGameGrid","createSelector","grid","selectIsGameFailed","isGameFailed","selectIsGameWon","isGameWon","selectIsGridGenerated","isGridCalculated","selectGameGridBombs","cells","selectClickedCell","cellsProps","cellProps","selectBombAmount","flat","filter","cell","length","selectFlagAmount","selectGameTime","gameTime","selectIsFlagSelected","isFlagSelected","selectIsCrossedFlagSelected","isFlagCrossedSelected","handleOnClick","cellPosition","clickedCell","openCell","isPositionOutOfBound","i","j","generateDefaultGrid","numberGrid","cellGrid","Array","row","push","convertNumbersIntoCellProps","booleanGrid","map","array","convertBooleanGridToNumber","slice","convertArrayIntoGrid","Math","floor","random","shuffle","arrayLength","bombAmount","booleanArray","generateBooleanArray","moveBombsFromClickedCellAndCalculateGrid","gridCells","gridWithEmptyClickedCell","newX","newY","randomInt","isNewPositionInClickedCellArea","isBombCell","moveBombsFromClickedCellArea","forEach","plusOneToEveryoneAroundBomb","min","max","Counter","useSelector","flagAmount","formatInDoubleDigit","timeValue","intervalId","Timer","setInterval","incrementTime","clearInterval","timeSeconds","hours","minutes","seconds","toString","formatTime","Flags","draggableFlag","getElementById","onmousedown","clonedFlag","cloneNode","dragNDrop","INITIAL_STATE","rerenderGridOnDragNDroppedFlag","removeFlagCell","handleOnDragNDroppedRemoveFlag","droppedCell","handleOnDragNDroppedFlag","isGameInProcess","every","isAllCellsOpened","openAllBombsGrid","cellArray","openAllBombs","rerenderGridOnClick","addFlag","removeFlag","rerenderGridOnRightClick","handleOnRightClick","Header","imageName","getSmileImageName","startGame","mapStateToProps","createStructuredSelector","gameWon","cellProp","key","Body","BottomPanel","isCrossedFlagSelected","selectCrossedFlag","opacity","selectFlag","App","Boolean","window","location","hostname","reducers","combineReducers","action","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ef12b63.chunk.js","sourcesContent":["import {GameState} from \"../reducers/game/game.reducer\";\nimport {CellPosition} from \"../components/cell/cell.component\";\n\nexport enum ActionTypes {\n    startGame,\n    cellClicked,\n    cellClickFailed,\n    gameWon,\n    cellRightClicked,\n    incrementTime,\n    dragNDroppedFlag,\n    selectFlag,\n    selectCrossedFlag,\n}\n\nexport interface StartGame {\n    type: ActionTypes.startGame,\n    payload: GameState\n}\n\nexport interface CellClicked {\n    type: ActionTypes.cellClicked,\n    payload: CellPosition\n}\n\nexport interface CellRightClicked {\n    type: ActionTypes.cellRightClicked,\n    payload: CellPosition\n}\n\nexport interface GameFailed {\n    type: ActionTypes.cellClickFailed,\n    payload: null\n}\n\nexport interface GameWon {\n    type: ActionTypes.gameWon,\n    payload: null\n}\n\nexport interface IncrementTime {\n    type: ActionTypes.incrementTime,\n    payload: null\n}\n\nexport interface DragNDroppedFlag {\n    type: ActionTypes.dragNDroppedFlag,\n    payload: {\n        cellToAddFlag?: CellPosition,\n        cellToRemoveFlag?: CellPosition\n    }\n}\n\nexport interface SelectFlagAction {\n    type: ActionTypes.selectFlag,\n    payload: null\n}\n\nexport interface SelectCrossedFlagAction {\n    type: ActionTypes.selectCrossedFlag,\n    payload: null\n}\n\nexport type Action = StartGame | CellClicked | GameFailed | GameWon | CellRightClicked | IncrementTime | DragNDroppedFlag | SelectFlagAction | SelectCrossedFlagAction;","export function isMobileDevice() {\n    const toMatch = [\n        /Android/i,\n        /webOS/i,\n        /iPhone/i,\n        /iPad/i,\n        /iPod/i,\n        /BlackBerry/i,\n        /Windows Phone/i\n    ];\n\n    return toMatch.some((toMatchItem) => {\n        return navigator.userAgent.match(toMatchItem);\n    });\n}","import {Dispatch, MouseEvent as ReactMouseEvent} from \"react\";\nimport {ActionTypes} from \"../actions/actions\";\nimport {CellPosition} from \"../components/cell/cell.component\";\nimport {isMobileDevice} from \"./detectmobilebrowser\";\n\nexport function dragNDropFlagOnGrid(dispatch: Dispatch<any>) {\n    return (event: ReactMouseEvent<HTMLElement>) => {\n        if (isMobileDevice() || event.button !== 0) {\n            return;\n        }\n\n        let targetFlag = event.currentTarget;\n        let parentElement = targetFlag.parentElement;\n        targetFlag.ondragstart = () => false;\n\n        // before move the element out of the parent\n        let gridCellToRemoveFlag = getClosest(targetFlag, \".gridCell\");\n\n        document.body.appendChild(targetFlag);\n\n        const prevPosition = targetFlag.style.position;\n        const prevZIndex = targetFlag.style.zIndex;\n        const prevTop = targetFlag.style.top;\n        const prevLeft = targetFlag.style.left;\n\n        targetFlag.style.position = 'absolute';\n        targetFlag.style.zIndex = '1000';\n\n        moveFlagAt(event.pageX, event.pageY, targetFlag);\n\n        const onMouseMove = (event: MouseEvent) => {\n            moveFlagAt(event.pageX, event.pageY, targetFlag);\n        }\n\n        document.addEventListener('mousemove', onMouseMove);\n\n        targetFlag.onmouseup = (event: MouseEvent) => {\n            document.removeEventListener('mousemove', onMouseMove);\n            if (targetFlag) {\n                document.body.removeChild(targetFlag);\n            }\n\n            let gridCellToAddFlag = getClosest(document.elementFromPoint(event.pageX, event.pageY), \".gridCell\");\n            let cellToRemoveFlagPosition = getCellPosition(gridCellToRemoveFlag);\n            let cellToAddFlagPosition = getCellPosition(gridCellToAddFlag);\n            if (cellToAddFlagPosition || cellToRemoveFlagPosition) {\n                if (cellToAddFlagPosition?.x === cellToRemoveFlagPosition?.x\n                    && cellToAddFlagPosition?.y === cellToRemoveFlagPosition?.y) {\n                    if (parentElement) {\n                        parentElement.appendChild(targetFlag);\n                        targetFlag.style.position = prevPosition || 'relative';\n                        targetFlag.style.zIndex = prevZIndex || 'initial';\n                        targetFlag.style.top = prevTop || '-32px';\n                        targetFlag.style.left = prevLeft || '-2px';\n                    }\n                    return;\n                }\n\n                dispatch({\n                    type: ActionTypes.dragNDroppedFlag,\n                    payload: {\n                        cellToAddFlag: cellToAddFlagPosition,\n                        cellToRemoveFlag: cellToRemoveFlagPosition\n                    }\n                })\n            }\n        }\n    };\n}\n\nexport function dragNDrop(dispatch: Dispatch<any>) {\n    let draggableFlag = document.getElementById(\"draggable_flag\");\n    if (draggableFlag) {\n        draggableFlag.ondragstart = () => false;\n        draggableFlag.onmousedown = (event: MouseEvent) => {\n            if (draggableFlag) {\n                const clonedFlag = draggableFlag.cloneNode(true) as HTMLElement;\n                clonedFlag.id = \"clonedFlag\";\n                document.body.appendChild(clonedFlag);\n                clonedFlag.ondragstart = () => false;\n\n                clonedFlag.style.position = 'absolute';\n                clonedFlag.style.zIndex = '1000';\n\n                moveFlagAt(event.pageX, event.pageY, clonedFlag);\n\n                const onMouseMove = (event: MouseEvent) => {\n                    moveFlagAt(event.pageX, event.pageY, clonedFlag);\n                }\n\n                document.addEventListener('mousemove', onMouseMove);\n\n                clonedFlag.onmouseup = (event: MouseEvent) => {\n                    document.removeEventListener('mousemove', onMouseMove);\n                    if (clonedFlag) {\n                        document.body.removeChild(clonedFlag);\n                    }\n\n                    let closestCellDiv = getClosest(document.elementFromPoint(event.pageX, event.pageY), \".gridCell\");\n                    let cellPosition = getCellPosition(closestCellDiv);\n                    if (cellPosition) {\n                        dispatch({type: ActionTypes.dragNDroppedFlag, payload: {cellToAddFlag: cellPosition}})\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction getCellPosition(element: Element | null): CellPosition | null {\n    if (element) {\n        let gridCellId = element.id;\n        const x = gridCellId.substr(0, gridCellId.indexOf('_'));\n        const y = gridCellId.substr(gridCellId.indexOf('_') + 1);\n        if (x && y) {\n            return {x: +x, y: +y};\n        } else {\n            return null;\n        }\n    }\n    return null;\n}\n\n// move our absolutely positioned flag under the pointer\nfunction moveFlagAt(x: number, y: number, element: HTMLElement) {\n    if (element) {\n        element.style.left = x - element.offsetWidth / 2 + 'px';\n        element.style.top = y - element.offsetHeight / 2 + 'px';\n    }\n}\n\nconst getClosest = (elementFromPoint: Element | null, selector: string): Element | null => {\n    while (elementFromPoint != null) {\n        if (elementFromPoint.matches(selector)) {\n            return elementFromPoint;\n        }\n        if (elementFromPoint.parentElement != null) {\n            elementFromPoint = elementFromPoint.parentElement;\n        } else {\n            return null;\n        }\n    }\n    return null;\n};","import React, {Dispatch, MouseEvent, useEffect} from \"react\";\nimport './cell.style.css';\nimport {connect, useDispatch} from \"react-redux\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {selectCellIsFailed, selectCellNumber, selectCellState} from \"../../reducers/game/game.selector\";\nimport {dragNDropFlagOnGrid} from \"../../utils/dragNDropUtils\";\n\nexport enum CellState {\n    INITIAL,\n    FLAGGED,\n    QUESTIONED,\n    OPEN,\n}\n\nexport interface CellPosition {\n    x: number;\n    y: number;\n}\n\nexport class CellProps {\n    position: CellPosition;\n    number: number;\n    state: CellState;\n    isFailed: boolean;\n\n    constructor(position: CellPosition, number: number) {\n        this.position = position;\n        this.number = number;\n        this.state = CellState.INITIAL;\n        this.isFailed = false;\n    }\n}\n\nconst GridCell = (props: CellProps) => {\n\n    const {position, number, state, isFailed} = props;\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isFailed) {\n            dispatch({type: ActionTypes.cellClickFailed});\n        }\n    });\n\n    return (\n        <div id={props.position.x + \"_\" + props.position.y} className=\"gridCell\" onClick={onCellClick(position, dispatch)}\n             onContextMenu={onCellRightClick(position, dispatch)}>\n            {\n                getCellElement(state, number, isFailed, dispatch)\n            }\n        </div>\n    );\n}\n\nfunction onCellRightClick(position: CellPosition, dispatch: Dispatch<any>) {\n    return (event: MouseEvent) => {\n        // prevent opening contextual menu on right button click\n        event.preventDefault();\n        dispatch({type: ActionTypes.cellRightClicked, payload: position})\n    }\n}\n\nfunction onCellClick(position: CellPosition, dispatch: Dispatch<Action>) {\n    return () => {\n        dispatch({type: ActionTypes.cellClicked, payload: position})\n    };\n}\n\nfunction getCellElement(state: CellState, number: number, isFailed: boolean, dispatch: Dispatch<any>) {\n    switch (state) {\n        case CellState.INITIAL:\n            return getInitialCellElement();\n        case CellState.OPEN:\n            if (number === -1) {\n                return getBombCellElement(isFailed);\n            } else if (number > 0) {\n                return getNumberCellElement(number);\n            } else {\n                return getEmptyCellElement();\n            }\n        case CellState.FLAGGED:\n            return getFlaggedCellElement(dispatch);\n        case CellState.QUESTIONED:\n            return getQuestionedCellElement();\n    }\n}\n\nfunction getInitialCellElement() {\n    return (\n        <svg width=\"33\" height=\"33\">\n            <rect className=\"initial\" width=\"30\" height=\"30\"/>\n        </svg>\n    );\n}\n\nfunction getQuestionedCellElement() {\n    return (\n        <div>\n            <svg width=\"33\" height=\"33\">\n                <rect className=\"initial\" width=\"30\" height=\"30\"/>\n            </svg>\n            <span className=\"question\">?</span>\n        </div>\n\n    );\n}\n\nfunction getFlaggedCellElement(dispatch: React.Dispatch<any>) {\n    return (\n        <div className=\"img-overlay-svg\">\n            <svg className=\"cell-sign\" width=\"33\" height=\"33\">\n                <rect className=\"initial\" width=\"30\" height=\"30\"/>\n            </svg>\n            <img className=\"cell-sign flag\" width=\"22\" height=\"22\" src=\"flag.png\" alt=\"123\" onMouseDown={dragNDropFlagOnGrid(dispatch)}/>\n        </div>\n    );\n}\n\nfunction getBombCellElement(isFailed: boolean) {\n    return (\n        <div className=\"img-overlay-svg\">\n            <svg width=\"33\" height=\"33\">\n                <rect className={\"open\" + (isFailed ? \" failedCell\" : \"\")} width=\"30\" height=\"30\"/>\n            </svg>\n            <img width=\"33\" height=\"33\" src=\"bomb.svg\" alt=\"123\"/>\n        </div>\n    );\n}\n\nfunction getNumberCellElement(number: number) {\n    return (\n        <div>\n            <svg width=\"33\" height=\"33\">\n                <rect className=\"open\" width=\"30\" height=\"30\"/>\n            </svg>\n            <span className={\"number_\" + number}>{number}</span>\n        </div>\n    );\n}\n\nfunction getEmptyCellElement() {\n    return (\n        <svg width=\"33\" height=\"33\">\n            <rect className=\"open\" width=\"30\" height=\"30\"/>\n        </svg>\n    );\n}\n\nconst mapStateToProps = (state: AppState, ownProps: CellProps): CellProps => ({\n    position: ownProps.position,\n    number: selectCellNumber(ownProps.position)(state),\n    state: selectCellState(ownProps.position)(state),\n    isFailed: selectCellIsFailed(ownProps.position)(state)\n})\n\nexport default connect(mapStateToProps)(GridCell)","import {createSelector} from 'reselect';\nimport {AppState} from \"../rootReducer\";\nimport {GameState, Grid} from \"./game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../../components/cell/cell.component\";\n\nconst selectGameState = (state: AppState): GameState => state.gameState;\n\nexport const selectGameGrid = createSelector<AppState, GameState, Grid>(\n    [selectGameState],\n    (gameState: GameState) => gameState.grid\n);\n\nexport const selectIsGameFailed = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameFailed\n)\n\nexport const selectIsGameWon = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGameWon\n)\n\nexport const selectIsGridGenerated = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isGridCalculated\n)\n\nexport const selectGameGridBombs = createSelector<AppState, Grid, CellProps[][]>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells\n)\n\nexport const selectClickedCell = (position: CellPosition) => createSelector<AppState, CellProps[][], CellProps>(\n    [selectGameGridBombs],\n    (cellsProps: CellProps[][]) => cellsProps[position.y][position.x]\n)\n\nexport const selectCellNumber = (position: CellPosition) => createSelector<AppState, CellProps, number>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.number\n)\n\nexport const selectCellState = (position: CellPosition) => createSelector<AppState, CellProps, CellState>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.state\n)\n\nexport const selectCellIsFailed = (position: CellPosition) => createSelector<AppState, CellProps, boolean>(\n    [selectClickedCell(position)],\n    (cellProps: CellProps) => cellProps.isFailed\n)\n\nexport const selectBombAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.number === -1).length\n)\n\nexport const selectFlagAmount = createSelector<AppState, Grid, number>(\n    [selectGameGrid],\n    (grid: Grid) => grid.cells.flat().filter(cell => cell.state === CellState.FLAGGED).length\n)\n\nexport const selectGameTime = createSelector<AppState, GameState, number>(\n    [selectGameState],\n    (gameState: GameState) => gameState.gameTime\n)\n\nexport const selectIsFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagSelected\n)\n\nexport const selectIsCrossedFlagSelected = createSelector<AppState, GameState, boolean>(\n    [selectGameState],\n    (gameState: GameState) => gameState.isFlagCrossedSelected\n)","import {Grid} from \"../reducers/game/game.reducer\";\nimport {CellPosition, CellProps, CellState} from \"../components/cell/cell.component\";\n\nexport function handleOnClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED || clickedCell.state === CellState.QUESTIONED) {\n        return;\n    }\n\n    if (clickedCell.number === -1) {\n        clickedCell.isFailed = true;\n    }\n\n    openCell(cells, clickedCell.position)\n}\n\nexport function addFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state !== CellState.OPEN) {\n        clickedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function removeFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n\n    if (clickedCell.state === CellState.FLAGGED) {\n        clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function handleOnRightClick(cells: CellProps[][], cellPosition: CellPosition) {\n    const clickedCell = cells[cellPosition.y][cellPosition.x];\n    switch (clickedCell.state) {\n        case CellState.INITIAL:\n            clickedCell.state = CellState.FLAGGED;\n            break;\n        case CellState.FLAGGED:\n            clickedCell.state = CellState.QUESTIONED;\n            break;\n        case CellState.QUESTIONED:\n            clickedCell.state = CellState.INITIAL;\n    }\n}\n\nexport function handleOnDragNDroppedFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const droppedCell = cells[cellPosition.y][cellPosition.x];\n    if (droppedCell.state === CellState.INITIAL || droppedCell.state === CellState.QUESTIONED) {\n        droppedCell.state = CellState.FLAGGED;\n    }\n}\n\nexport function handleOnDragNDroppedRemoveFlag(cells: CellProps[][], cellPosition: CellPosition) {\n    const removeFlagCell = cells[cellPosition.y][cellPosition.x];\n    if (removeFlagCell.state !== CellState.OPEN) {\n        removeFlagCell.state = CellState.INITIAL;\n    }\n}\n\nexport function openAllBombs(grid: Grid): void {\n    grid.cells.forEach(cellArray => cellArray.forEach(cell => {\n        if (cell.number === -1 && cell.state !== CellState.FLAGGED) {\n            cell.state = CellState.OPEN;\n        }\n    }));\n}\n\nexport function isAllCellsOpened(cells: Array<Array<CellProps>>) {\n    return cells.flat()\n        .filter(cell => cell.number !== -1)\n        .every(cell => cell.state === CellState.OPEN)\n}\n\nfunction openCell(cells: CellProps[][], cellPosition: CellPosition) {\n    if (isPositionOutOfBound(cells, cellPosition)) {\n        return;\n    }\n\n    const cell = cells[cellPosition.y][cellPosition.x];\n    if (cell.state === CellState.OPEN) {\n        return; // to avoid looping on neighbouring empty cells\n    }\n    cell.state = CellState.OPEN;\n\n    // open all cells around\n    if (cell.number === 0) {\n        for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n            for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n                if (i === cellPosition.x && j === cellPosition.y) {\n                    continue;\n                }\n\n                openCell(cells, {x: i, y: j})\n            }\n        }\n    }\n}\n\nexport function isPositionOutOfBound(grid: Array<Array<CellProps>>, cellPosition: CellPosition) {\n    return cellPosition.x < 0 || cellPosition.y < 0\n        || cellPosition.x >= grid.length || cellPosition.y >= grid[0].length;\n}\n","import {CellPosition, CellProps} from \"../components/cell/cell.component\";\nimport {isPositionOutOfBound} from \"./gridUtils\";\n\nexport function generateDefaultGrid(width: number, height: number): Array<Array<CellProps>> {\n    let booleanArray = generateBooleanArray(width, height);\n    let shuffledBooleanArray = shuffle(booleanArray);\n    let booleanGrid = convertArrayIntoGrid(shuffledBooleanArray, width, height);\n    let numberGrid = convertBooleanGridToNumber(booleanGrid);\n    return convertNumbersIntoCellProps(numberGrid);\n}\n\nexport function moveBombsFromClickedCellAndCalculateGrid(gridCells: Array<Array<CellProps>>, position: CellPosition): Array<Array<CellProps>> {\n    let gridWithEmptyClickedCell = moveBombsFromClickedCellArea(position, gridCells)\n    return calculateCellBombNumbers(gridWithEmptyClickedCell);\n}\n\nexport function moveBombsFromClickedCellArea(position: CellPosition, grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    for (let i = position.x - 1; i <= position.x + 1; i++) {\n        for (let j = position.y - 1; j <= position.y + 1; j++) {\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number === -1) {\n                let newX;\n                let newY;\n                do {\n                    newX = randomInt(0, grid[0].length - 1);\n                    newY = randomInt(0, grid.length - 1);\n                } while(isNewPositionInClickedCellArea(newX, newY, position) || isBombCell(newX, newY, grid))\n                cell.number = 0;\n                grid[newY][newX].number = -1;\n            }\n        }\n    }\n    return grid;\n}\n\nfunction isBombCell(x: number, y: number, grid: Array<Array<CellProps>>) {\n    return grid[y][x].number === -1;\n}\n\nfunction isNewPositionInClickedCellArea(newX: number, newY: number, position: CellPosition) {\n    return (newX >= position.x - 1 && newX <= position.x + 1) && (newY >= position.y - 1 && newY <= position.y + 1);\n}\n\nfunction randomInt(min: number, max: number): number {\n    return min + Math.floor((max - min) * Math.random());\n}\n\nexport function generateBooleanArray(width: number, height: number): Array<boolean> {\n    const arrayLength = width * height;\n    const bombAmount = Math.floor(arrayLength / 4);\n    const booleanArray = new Array<boolean>();\n\n    for (let i = 0; i < arrayLength; i++) {\n        if (i < bombAmount) {\n            booleanArray.push(true);\n        } else {\n            booleanArray.push(false);\n        }\n    }\n\n    return booleanArray;\n}\n\nfunction shuffle(array: Array<boolean>): Array<boolean> {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport function convertArrayIntoGrid<T>(array: Array<T>, width: number, height: number): Array<Array<T>> {\n    const grid = new Array<Array<T>>();\n\n    for (let i = 0; i < height; i++) {\n        grid.push(array.slice(width * i, width * (i + 1)));\n    }\n\n    return grid;\n}\n\nexport function convertBooleanGridToNumber(booleanGrid: Array<Array<boolean>>): Array<Array<number>> {\n    return booleanGrid.map((array: Array<boolean>) => array.map((cell: boolean) => cell ? -1 : 0));\n}\n\nexport function convertNumbersIntoCellProps(numberGrid: Array<Array<number>>): Array<Array<CellProps>> {\n    const cellGrid = new Array<Array<CellProps>>();\n\n    for (let i = 0; i < numberGrid.length; i++) {\n        let row = new Array<CellProps>();\n        for (let j = 0; j < numberGrid[0].length; j++) {\n            row.push(new CellProps({x: j, y: i}, numberGrid[i][j]))\n        }\n        cellGrid.push(row);\n    }\n\n    return cellGrid;\n}\n\nexport function calculateCellBombNumbers(grid: Array<Array<CellProps>>): Array<Array<CellProps>> {\n    grid.forEach((array: Array<CellProps>) => array.forEach((cell: CellProps) => {\n        if (cell.number === -1) {\n            plusOneToEveryoneAroundBomb(cell.position, grid)\n        }\n    }))\n\n    return grid;\n}\n\nexport function plusOneToEveryoneAroundBomb(cellPosition: CellPosition, grid: Array<Array<CellProps>>) {\n    for (let i = cellPosition.x - 1; i <= cellPosition.x + 1; i++) {\n        for (let j = cellPosition.y - 1; j <= cellPosition.y + 1; j++) {\n            if (i === cellPosition.x && j === cellPosition.y) {\n                continue;\n            }\n\n            if (isPositionOutOfBound(grid, {x: j, y: i})) {\n                continue;\n            }\n\n            const cell = grid[j][i];\n            if (cell.number !== -1) {\n                cell.number += 1;\n            }\n        }\n    }\n}\n\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {selectBombAmount, selectFlagAmount} from \"../../reducers/game/game.selector\";\nimport './counter.style.css';\n\nexport const Counter = () => {\n\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    return (\n        <div>\n            <div className=\"bomb_amount_container\"><span className=\"bomb_amount\">{bombAmount - flagAmount}</span></div>\n            <div className=\"image_container\"><img className=\"bomb_image\" src=\"bomb.svg\" alt=\"123\"/></div>\n        </div>\n    )\n}","export function formatTime(timeSeconds: number): string {\n    const hours = Math.floor(timeSeconds / 3600);\n    const minutes = Math.floor((timeSeconds % 3600) / 60);\n    const seconds = (timeSeconds % 3600) % 60;\n    return formatInDoubleDigit(hours.toString()) + \":\" + formatInDoubleDigit(minutes.toString()) + \":\" + formatInDoubleDigit(seconds.toString());\n}\n\nfunction formatInDoubleDigit(timeValue: string) {\n    if (timeValue.length === 0) {\n        return \"00\";\n    } else if(timeValue.length === 1) {\n        return \"0\" + timeValue;\n    } else {\n        return timeValue;\n    }\n}\n","import React, {useEffect} from \"react\";\nimport {formatTime} from \"../../utils/timerUtils\";\nimport './timer.style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectGameTime} from \"../../reducers/game/game.selector\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nlet intervalId: NodeJS.Timeout;\n\nexport const Timer = () => {\n    const gameTime = useSelector(selectGameTime);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        intervalId = setInterval(\n            () => dispatch({type: ActionTypes.incrementTime}),\n            1000\n        );\n\n        return () => {\n            clearInterval(intervalId);\n        }\n    })\n\n    return (\n        <div>\n            <span className=\"timer_span\">{formatTime(gameTime)}</span>\n        </div>\n    );\n}","import React, {useEffect} from \"react\";\nimport './flags.style.css';\nimport {useDispatch} from \"react-redux\";\nimport {dragNDrop} from \"../../utils/dragNDropUtils\";\n\nexport const Flags = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => dragNDrop(dispatch))\n\n    return (\n        <div id=\"drag_n_drop_flags_container_id\" className=\"drag_n_drop_flags_container\">\n            <img className=\"drag_n_drop_flag_1\" width=\"22\" height=\"22\" src=\"flag.png\" alt=\"123\"/>\n            <img className=\"drag_n_drop_flag_2\" width=\"22\" height=\"22\" src=\"flag.png\" alt=\"123\"/>\n            <img className=\"drag_n_drop_flag_3\" width=\"22\" height=\"22\" src=\"flag.png\" alt=\"123\"/>\n            <img id=\"draggable_flag\" className=\"drag_n_drop_flag_4\" width=\"22\" height=\"22\" src=\"flag.png\" alt=\"123\"/>\n        </div>\n    )\n}","import {Action, ActionTypes} from \"../../actions/actions\";\nimport {CellPosition, CellProps} from \"../../components/cell/cell.component\";\nimport {\n    addFlag,\n    handleOnClick,\n    handleOnDragNDroppedFlag,\n    handleOnDragNDroppedRemoveFlag,\n    handleOnRightClick,\n    isAllCellsOpened,\n    openAllBombs, removeFlag\n} from \"../../utils/gridUtils\";\nimport {generateDefaultGrid, moveBombsFromClickedCellAndCalculateGrid} from \"../../utils/gridGeneratorUtils\";\n\nexport interface Grid {\n    cells: Array<Array<CellProps>>\n}\n\nexport interface GameState {\n    isGameWon: boolean;\n    isGameFailed: boolean\n    isGridCalculated: boolean;\n    gameTime: number;\n    isFlagSelected: boolean;\n    isFlagCrossedSelected: boolean;\n    grid: Grid\n}\n\nexport const INITIAL_STATE: GameState = {\n    isGameWon: false,\n    isGameFailed: false,\n    isGridCalculated: false,\n    gameTime: 0,\n    isFlagSelected: false,\n    isFlagCrossedSelected: false,\n    grid: {\n        cells: generateDefaultGrid(10, 10)\n    }\n}\n\nexport const gameReducer = (state: GameState = INITIAL_STATE, action: Action): GameState => {\n    switch (action.type) {\n        case ActionTypes.startGame:\n            return action.payload;\n        case ActionTypes.cellClicked:\n            let cells = rerenderGridOnClick(state, action.payload);\n            return {\n                ...state,\n                grid: {\n                    cells: cells\n                },\n                isGameWon: isGameWon(cells),\n                isFlagSelected: false,\n                isFlagCrossedSelected: false\n            }\n        case ActionTypes.cellClickFailed:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n                isGameFailed: true,\n            }\n        case ActionTypes.cellRightClicked:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnRightClick(state.grid.cells, action.payload),\n                }\n            }\n        case ActionTypes.gameWon:\n            return {\n                ...state,\n                grid: openAllBombsGrid(state.grid),\n            }\n        case ActionTypes.incrementTime:\n            return {\n                ...state,\n                gameTime: isGameInProcess(state) ? state.gameTime + 1 : state.gameTime,\n            }\n        case ActionTypes.dragNDroppedFlag:\n            return {\n                ...state,\n                grid: {\n                    cells: rerenderGridOnDragNDroppedFlag(state.grid.cells, action.payload.cellToAddFlag, action.payload.cellToRemoveFlag),\n                }\n            }\n        case ActionTypes.selectFlag:\n            return {\n                ...state,\n                isFlagCrossedSelected: false,\n                isFlagSelected: !state.isFlagSelected\n            }\n        case ActionTypes.selectCrossedFlag:\n            return {\n                ...state,\n                isFlagSelected: false,\n                isFlagCrossedSelected: !state.isFlagCrossedSelected\n            }\n        default:\n            return INITIAL_STATE;\n    }\n}\n\nfunction rerenderGridOnDragNDroppedFlag(cells: Array<Array<CellProps>>, cellToAddFlag?: CellPosition, cellToRemoveFlag?: CellPosition): Array<Array<CellProps>> {\n    if (cellToRemoveFlag) {\n        handleOnDragNDroppedRemoveFlag(cells, cellToRemoveFlag);\n    }\n    if (cellToAddFlag) {\n        handleOnDragNDroppedFlag(cells, cellToAddFlag);\n    }\n    return cells;\n}\n\nfunction isGameInProcess(state: GameState) {\n    return state.isGridCalculated && !state.isGameFailed && !state.isGameWon;\n}\n\nfunction isGameWon(cells: CellProps[][]) {\n    return isAllCellsOpened(cells);\n}\n\nfunction openAllBombsGrid(grid: Grid) {\n    openAllBombs(grid)\n    return grid;\n}\n\nfunction rerenderGridOnClick(state: GameState, cellPosition: CellPosition): CellProps[][] {\n    let gridCells = state.grid.cells;\n\n    if (state.isFlagSelected) {\n        addFlag(gridCells, cellPosition)\n    } else if (state.isFlagCrossedSelected) {\n        removeFlag(gridCells, cellPosition)\n    } else {\n        if (!state.isGridCalculated) {\n            gridCells = moveBombsFromClickedCellAndCalculateGrid(gridCells, cellPosition);\n            state.isGridCalculated = true;\n        }\n        handleOnClick(gridCells, cellPosition);\n    }\n    return gridCells;\n}\n\nfunction rerenderGridOnRightClick(cells: CellProps[][], cellPosition: CellPosition): CellProps[][] {\n    handleOnRightClick(cells, cellPosition);\n    return cells;\n}\n","import React, {Dispatch} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectBombAmount,\n    selectFlagAmount,\n    selectIsGameFailed,\n    selectIsGameWon\n} from \"../../reducers/game/game.selector\";\nimport \"./header.style.css\";\nimport {Action, ActionTypes} from \"../../actions/actions\";\nimport {generateDefaultGrid} from \"../../utils/gridGeneratorUtils\";\nimport {Counter} from \"../counter/counter.component\";\nimport {Timer} from \"../timer/timer.component\";\nimport {Flags} from \"../flags/flags.component\";\nimport {isMobileDevice} from \"../../utils/detectmobilebrowser\";\nimport {INITIAL_STATE} from \"../../reducers/game/game.reducer\";\n\nexport const Header = () => {\n    const isGameWon = useSelector(selectIsGameWon)\n    const isGameFailed = useSelector(selectIsGameFailed)\n    const bombAmount = useSelector(selectBombAmount);\n    const flagAmount = useSelector(selectFlagAmount);\n\n    const dispatch = useDispatch();\n\n    let imageName = getSmileImageName(isGameFailed, isGameWon, bombAmount, flagAmount);\n\n    return (\n        <div className=\"header\">\n            <div className=\"flags_and_counter_container\">\n                {\n                    !isMobileDevice() &&\n                    <div className=\"flags\">\n                        <Flags/>\n                    </div>\n                }\n                <div className=\"counter\">\n                    <Counter/>\n                </div>\n            </div>\n            <div className=\"smile\">\n                <img className=\"smile_image\" src={\"smiles/\" + imageName} alt=\"fail\" onClick={startGame(dispatch)}/>\n            </div>\n            <div className=\"timer\">\n                <Timer/>\n            </div>\n        </div>\n    )\n}\n\nfunction startGame(dispatch: Dispatch<Action>) {\n    return () => dispatch({\n        type: ActionTypes.startGame,\n        payload: {\n            ...INITIAL_STATE,\n            grid: {\n                cells: generateDefaultGrid(10, 10)\n            }\n        }\n    })\n}\n\nfunction getSmileImageName(isGameFailed: boolean, isGameWon: boolean, bombAmount: number, flagAmount: number) {\n    if (isGameFailed) {\n        return \"failed.png\";\n    } else if (isGameWon) {\n        return \"win.png\";\n    } else if (bombAmount < flagAmount) {\n        return \"laugh.png\";\n    } else {\n        return \"start.png\";\n    }\n}\n","import React, {useEffect} from \"react\";\nimport GridCell, {CellProps} from \"../cell/cell.component\";\nimport './grid.style.css';\nimport {GameState} from \"../../reducers/game/game.reducer\";\nimport {createStructuredSelector} from \"reselect\";\nimport {\n    selectGameGrid,\n    selectGameTime,\n    selectIsCrossedFlagSelected,\n    selectIsFlagSelected,\n    selectIsGameFailed,\n    selectIsGameWon,\n    selectIsGridGenerated\n} from \"../../reducers/game/game.selector\";\nimport {AppState} from \"../../reducers/rootReducer\";\nimport {connect, useDispatch} from \"react-redux\";\nimport {ActionTypes} from \"../../actions/actions\";\n\nconst GridComponent = (props: GameState) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (props.isGameWon) {\n            dispatch({type: ActionTypes.gameWon})\n        }\n    })\n\n    return (\n        <div className={\"grid\" + (props.isGameFailed || props.isGameWon ? \" disabled\" : \"\")}>\n            {\n                props.grid.cells.map((cellProps: Array<CellProps>) =>\n                    cellProps.map(cellProp => <GridCell\n                        key={cellProp.position.x + \"x\" + cellProp.position.y} {...cellProp}/>))\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, GameState>({\n    grid: selectGameGrid,\n    isGameFailed: selectIsGameFailed,\n    isGameWon: selectIsGameWon,\n    isGridCalculated: selectIsGridGenerated,\n    gameTime: selectGameTime,\n    isFlagSelected: selectIsFlagSelected,\n    isFlagCrossedSelected: selectIsCrossedFlagSelected\n})\n\nexport default connect(mapStateToProps)(GridComponent)","import React from \"react\";\nimport './body.style.css';\nimport GridComponent from \"../grid/grid.component\";\n\nexport const Body = () => {\n    // const grid = useSelector(selectGameGrid)\n    return (\n        <div className=\"body_container\">\n            <div className=\"body\">\n                <GridComponent/>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {ActionTypes} from \"../../actions/actions\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectIsCrossedFlagSelected, selectIsFlagSelected} from \"../../reducers/game/game.selector\";\nimport './bottom-panel.style.css';\n\nexport const BottomPanel = () => {\n\n    const dispatch = useDispatch();\n    let isFlagSelected = useSelector(selectIsFlagSelected);\n    let isCrossedFlagSelected = useSelector(selectIsCrossedFlagSelected);\n\n    return (\n        <div className=\"bottom_panel\">\n            <div className=\"remove_flag\"\n                 onClick={() => dispatch({type: ActionTypes.selectCrossedFlag})}\n                 style={isCrossedFlagSelected ? {opacity: 1} : {opacity: 0.3}}>\n                <img className=\"drag_crossed_mobile\" src=\"flag_big.png\" alt=\"123\"/>\n            </div>\n            <div className=\"add_flag\"\n                 onClick={() => dispatch({type: ActionTypes.selectFlag})}\n                 style={isFlagSelected ? {opacity: 1} : {opacity: 0.3}}>\n                <img className=\"drag_mobile\" src=\"flag_big.png\" alt=\"123\"/>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport {Header} from \"./components/header/header.component\";\nimport {Body} from \"./components/body/body.component\";\nimport {isMobileDevice} from \"./utils/detectmobilebrowser\";\nimport {BottomPanel} from \"./components/bottom-panel/bottom-panel.component\";\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Body/>\n            {\n                isMobileDevice() && <BottomPanel/>\n            }\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {gameReducer, GameState} from \"./game/game.reducer\";\n\nexport interface AppState {\n    gameState: GameState\n}\n\nexport const reducers = combineReducers<AppState>({\n    gameState: gameReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from 'react-redux';\nimport {reducers} from \"./reducers/rootReducer\";\nimport logger from 'redux-logger';\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst store = createStore(reducers, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}